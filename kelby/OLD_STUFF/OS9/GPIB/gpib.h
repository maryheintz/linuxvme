/*   TMS9914A GPIB controller registers and additional omnimodule registers*/typedef struct {        unsigned char   pad0;           /* padding for odd only io addressess */        unsigned char   stat0;          /* interrupt mask/status register 0 */        unsigned char   pad2;        unsigned char   stat1;          /* interrupt mask/status register 1 */        unsigned char   pad4;        unsigned char   adstat;         /* address status register */        unsigned char   pad6;        unsigned char   busstat;        /* bus status register */        unsigned char   pad8;        unsigned char   address;        /* address register */        unsigned char   pada;        unsigned char   spoll;          /* serial poll register */        unsigned char   padc;        unsigned char   cmdpas;         /* command pass through register */        unsigned char   pade;        unsigned char   datain;         /* data in register */        unsigned char   pad10;        unsigned char   vlatch;         /* interrupt vector register */        unsigned char   pad12_20[0x21-0x12];        unsigned char   sclatch;        /* system controller latch */        } GPIB;/*  defines for write nmemonics of above read registers*/#define mask0   stat0#define mask1   stat1#define auxcmd  busstat#define ppoll   cmdpas#define dataout datain/*  auxiliary commands for the tms9914*/#define ton     0x8a    /* talk only */#define cton    0x0a    /*           */#define tcs     0x0d    /* take control synchronously */#define tca     0x0c    /* take contron asynchronously */#define gts     0x0b    /* go to standby */#define feoi    0x08    /* send eoi with next byte */#define lon     0x89    /* listen only */#define clon    0x09    /*             */#define sic     0x8f    /* send interface clear */#define csic    0x0f    /*                      */#define sre     0x90    /* send remote enable */#define csre    0x10    /*                    */#define swrst   0x80    /* software reset */#define cswrst  0x0     /*                *//*  multiline commands for the gpib bus*/#define MTA             0x40    /* my talk address */#define UNT             0x5f    /* untalk */#define MLA             0x20    /* my listen address */#define UNL             0x3f    /* unlisten */#define SPE             0x18    /* serial poll enable */#define SPD             0x19    /* serial poll disable */#define LLO             0x11    /* local lockout */#define DCL             0x14    /* device clear */#define SDO             0x04    /* selected clear */#define GTL             0x01    /* go to local *//*  base address of the gpib omnimodule*/unsigned char *vio = {0x80e00000}; /* base address of OB68K/VIO base board */GPIB *gpib = {0x0};             /* base address of omnimodule filled in by                                 * gpib_reset() function */unsigned char status = 0;               /* saves bits read in from status register 0 */unsigned char zero = 0;                 /* used to force zero writes to hardware registers *//*  address for devices on the gpib bus*/unsigned char my_address = 0;   /* controllers address *//*  data directions*/#define DATA_IN  0#define DATA_OUT 1/*  variables to sync interrupt handlers with main code */int interrupt_done;unsigned long interrupt_status;unsigned char *int_data_pointer;unsigned long int_data_size;int int_data_dir;unsigned char bus_vector = 0xfe;                /* bus vector for scsi controller */unsigned char dma_bus_vector = 0xfd;    /* bus vector dma channel *//* * forward referenced functions *//* unsigned long as_interrupt(); */unsigned char buffer[256] = {0};unsigned char *bigbuf = {0x40000};