#include <math.h>
#include <time.h>
#include <stdio.h>
unsigned long pio_adr,caen_adr;
unsigned short *caen_data,*caen_prelsb,*caen_premsb,*caen_postlsb,*caen_postmsb,*caen_trigrec,
 *caen_softtrig,*caen_trigtype,*caen_trigsource,*caen_reset,*caen_start,*caen_interrupt,
 *caen_chmask;
int dum1[100],ksave,msave,maxsave,dum2[100];
double avg[4][3000],fmax,scale;
unsigned short cdata[4][3000],raw[4][3000],ped[4][3000],posttrig,endcell,trigrec; 
unsigned short wd1[4],wd2[4],wd3[4],wd;
unsigned long vmebase,badr;
char string[200];
long odel,onew,orel,current;
main(argc,argv,envs)
int argc;
char *argv[];
char *envs[];
  { FILE *fp;
    int icap,n1,m,event,nn,mm,imax,wait;
    int dac,alarm,vmin,vmax;
    unsigned short i,l,iev;
    unsigned long k,*adr,kk,dcnt;
    double angle,density,trans,pk,pksm,sm;
    fp = fopen("lin_caen.txt","w");   
    vmebase = vme_a24_base();
    badr = 0x460000;
    caen_setup();
   
   usleep(2);  
/*    printf(" returned from caen_setup\n"); */
    sidev(1);  /* force plot to screen without asking*/
/* ========== get the pedestals ================ */
    *caen_trigtype = 0;
    for(m=0;m<4;m++)
      { for(i=0;i<2560;i++)
	 { ped[m][i] = 0;;
	 }
      }
    for(i=0;i<100;i++)
      { *caen_reset=0;
        usleep(10);
        *caen_start=1;
        usleep(10000);
        *caen_softtrig=0;;
       usleep(10000);
       /* check if caen got a trigger */
       wd = *caen_interrupt;
       /* printf("interrupt=%d  vernier=%d    %d\n",wd&1,wd2[0],maxsave-wd2[0]);  */
       if(wd & 1 == 0)
         { printf(" error - no caen interrupt bit set \n");
	   exit(0);
	 }
       caen_read();
       for(m=0;m<4;m++)
         { for(i=0;i<2560;i++)
	    { ped[m][i]=ped[m][i] + raw[m][i];
	    }
	 }
       }
       for(m=0;m<4;m++)
         { for(i=0;i<2560;i++)
	    { ped[m][i]=ped[m][i]/100;
	    }
	 }
	*caen_trigtype = 0x2;
	event=0;
    /*   printf("starting event loop\n"); */
     for(angle=0.0;angle<180.0;angle=angle+3.6)
      { set_angle(angle);
       event=0;
       for(m=0;m<4;m++)
         { for(i=0;i<2560;i++)
	    { avg[m][i] = 0.0;
	    }
	 }

 loop: if(fpsw(5)==1) goto xit;       
       *caen_reset=0;
       usleep(1);
       *caen_start=1;
       usleep(1);
       pulse_diode();
       usleep(1);
       wd = *caen_interrupt;
       /* printf("interrupt=%d  vernier=%d    %d\n",wd&1,wd2[0],maxsave-wd2[0]);  */
       if(wd & 1 == 0)
         { printf(" error - no caen interrupt bit set \n");
	   exit(0);
	 }
       caen_read();
       if(fpsw(1)==1)  
	{ for(mm=0;mm<4;mm++)
	   for(n1=0;n1<2500;n1=n1+250)
	     { sprintf(string,"diode angle=%5.1f  input=%d pk=%d 1st bin=%d",angle,mm,ksave,n1);
               onedisp(250,string,n1,mm);
	     }
        }  
       if(fpsw(0)==1)
        { n1=ksave/10;
	  n1=n1*10;
	  n1=n1-125;
          sprintf(string,"peak bin=%d  amp=%d trec=%d  bins=%d-%d  m=%d k=%d vnr=%d",
	     ksave,cdata[msave][ksave],trigrec,n1,n1+400,msave,ksave,wd2[0]);
          onedisp(400,string,n1,msave);
        }  
	usleep(1);
        event++;
	if(event==1) 
	  { vmin=wd2[0];
	    vmax = wd2[0];
	  }
	if(wd2[0]<vmin) vmin = wd2[0];
	if(wd2[0]>vmax) vmax = wd2[0];
	for(m=0;m<4;m++)
	  { for(i=0;i<2650;i++)
	    {avg[m][i]=avg[m][i] + (double)cdata[m][i];
	    }
	  }
       if(event<200) goto loop;
	fmax = 0.0;
	imax=0;
	scale = 1.0;
	/* printf(" event=%d\n",event); */
	for(m=0;m<4;m++)
	  { for(i=0;i<2650;i++)
	    {avg[m][i]=avg[m][i]/(double)event;
	     if(m==0 && avg[m][i]>fmax) 
	      { fmax=avg[m][i];
	        imax=i;
              }
	    }
	  }

         pksm=0.0;
	 sm=0.0;
	 for(i=450;i<470;i++)
	  { sm=sm+1.0;
	    pksm=pksm+avg[0][i];
	  }
	 pk=pksm/sm;
/*	 sprintf(string,"angle=%f  fmax=%f   pk=%f   trans=%f  imax=%d  current=%d\n",
	    angle,fmax,pk,trans,imax,current); */
         if(fpsw(4)==1) onescale(250,string,n1-50,0); 
	 density = 0.014815*angle;
	 trans = 100.0*pow(10.0,-density);
	 fprintf(fp,"%f %f %f %f\n",angle,fmax,trans,pk);
	 printf("angle=%5.1f  fmax=%7.1f   pk=%7.1f  trans=%7.2f  imax=%d  current=%d  odel=%d\n",
	    angle,fmax,pk,trans,imax,current,odel);
         fflush(fp);
         n1=ksave/250;
	 n1=n1*250;
    } /* end of angle loop */
xit:
         set_angle(0.0);
   }  /* end of main */
   
    caen_setup()
      { unsigned short k1,k2,j1,j2,pre;
        /* test write-read to caen v1729 */
	caen_prelsb = (unsigned short*)(vmebase+badr+0x1800);  
        *caen_prelsb = 0xaa;
	usleep(1);
	k1 = *caen_prelsb;
	k2 = k1 & 0xff;
	printf("sent=0xaa  read back=%x %x\n",k1,k2);
	if(k2 != 0xaa) exit(0);
 
         /* ========== issue reset ========== */
        caen_reset = (unsigned short*)(vmebase+badr+0x0800);
        *caen_reset=0;
 
 	/* ========== setup pretrig ========== */
	pre = 10;
	caen_prelsb = (unsigned short*)(vmebase+badr+0x1800);  
	caen_premsb = (unsigned short*)(vmebase+badr+0x1900); 
	k1 = (pre & 0xff);
	k2 = ((pre>>8) & 0xff);

        *caen_prelsb = k1;
        *caen_premsb = k2;
	j1 = *caen_prelsb & 0xff;
	j2 = *caen_premsb & 0xff;

        /* ========== setup posttrig ========== */
	posttrig = 0;
	caen_postlsb = (unsigned short*)(vmebase+badr+0x1a00);
	caen_postmsb = (unsigned short*)(vmebase+badr+0x1b00);
        *caen_postlsb = posttrig & 0xff;
        *caen_postmsb = (posttrig>>8) & 0xff;

        /* ========== setup the trigger source ========== */
	caen_trigsource = (unsigned short*)(vmebase+badr+0x1e00);
	*caen_trigsource = 0;

        /* ========== channel mask - store data for all 4 channels ========== */
	caen_chmask = (unsigned short*)(vmebase+badr+0x2300);
	*caen_chmask = 0xf;

        /* ========== setup triger type ========== */
	caen_trigtype = (unsigned short*)(vmebase+badr+0x1d00);
	*caen_trigtype = 0x2;

        caen_start = (unsigned short*)(vmebase+badr+0x1700);
	caen_trigrec = (unsigned short*)(vmebase+badr+0x2000);
	caen_data = (unsigned short*)(vmebase+badr+0x0d00);
	caen_softtrig = (unsigned short*)(vmebase+badr+0x1c00);
	caen_interrupt = (unsigned short*)(vmebase+badr+0x8000);

      }
      
    caen_read()
        { int i,kk,k,m,shift;
          unsigned short wd;
	  unsigned short tr;
	  double dshift;
 	  tr = *caen_trigrec;
	  trigrec = tr & 0xff;
          shift = 2560*(128-trigrec)/128;
	  /* printf(" tr=%x  trigrec=%d  endcell=%d\n",tr,trigrec,endcell);   */
	  endcell = (20*(posttrig+trigrec))%128;
	     wd1[3]=*caen_data;
	     wd1[2]=*caen_data;
	     wd1[1]=*caen_data;
	     wd1[0]=*caen_data;
	     wd2[3]=*caen_data;
	     wd2[2]=*caen_data;
	     wd2[1]=*caen_data;
	     wd2[0]=*caen_data;
	     wd3[3]=*caen_data;
	     wd3[2]=*caen_data;
	     wd3[1]=*caen_data;
	     wd3[0]=*caen_data;
	     /* calculate the vernier time shift */
	     dshift = -0.02222*(double)wd2[0] +148.88;
	     shift = shift + (int)dshift;
	     for(i=0;i<2560;i++) 
	      { wd=*caen_data;
	        raw[3][i] = wd & 0xfff;
	        wd=*caen_data;
	        raw[2][i] = wd & 0xfff;
	        wd=*caen_data;
	        raw[1][i] = wd & 0xfff;
	        wd=*caen_data;
	        raw[0][i] = wd & 0xfff;
	      }
	  msave = 0;
	  ksave = 0;
	  maxsave = 0;
/* ==============          for(m=0;m<4;m++) =============== */
          for(m=0;m<4;m++)
	   { for(i=0;i<2560;i++)
	       {  kk = 2560+i-endcell;
	         k = kk%2560;
                 k=i-shift;
		 if(k<0) k=k+2560;
		 if(k>2560) k=k-2560;
	         cdata[m][k]=raw[m][i]-ped[m][i];  
		 if(cdata[m][k]>maxsave)
		  { msave = m;
		    ksave = k;
		    maxsave = cdata[m][k];
		    /* printf("m=%d  k=%d  max=%d\n",msave,ksave,maxsave); */
		  }
	       } 
           }
	 }	

onedisp(nn,string,n1,m)  /* nn=bins to display  starting with bin n1 */
 int nn,n1,m;
 char *string;
 { int max,mmax,idx,idy,ny,linx,ixbas,iybas,ix,iy,iylst,kx,ky,i,k,ii,iii,n2;
   int idel,ifix;
   double dely,y,dy;
   char str[5];
   erasm();
/* ======================= first channel plot kk1 ================== */    
   max = 0;
   n2 = n1 + nn;
   for(iii=n1; iii<n2; iii++) 
     {  if(iii<0) ifix=iii+2560;
        if(iii>=0) ifix=iii%2560;
        if (max < cdata[m][ifix]) max = cdata[m][ifix];
     };
   mmax=5000;
   if(max<4000) mmax=4000;
   if(max<3000) mmax=3000;
   if(max<2000) mmax=2000;
   if(max<1000) mmax=1000;
   if(max<800) mmax=800;
   if(max<600) mmax=600;
   if(max<500) mmax=500;
   if(max<400) mmax=400;
   if(max<200) mmax=200;
   if(max<100) mmax=100;
   if(max<50) mmax=50;
   idx = 1600/nn;
   linx = idx*nn;
   ixbas = 100+(2200-linx)/2;
   dy = 2400.0/(double)mmax;
   iybas = 250;
   mova(ixbas,iybas);
   drwr(linx,0);
   mova(ixbas,iybas);
   iylst = 0;
   for(i=n1;i<=n2;i++)
    { if(i<0) ifix=i+2560;
      if(i>=0) ifix=i%2560;
      ii = cdata[m][ifix];
      y = (double)ii;
      y = y*dy;
      iy = (int)y;
      idy = iy-iylst;
      drwr(0,idy);
      drwr(idx,0);
      iylst=iy;
    }
      drwr(0,-iylst);

/*  label horizontal axis */
    idel=2;
    if(nn>100) idel=25;
    if(nn>200) idel=50;
    for(i=0;i<nn+2;i=i+idel)
     { ix=ixbas+idx*i;
       mova(ix,iybas);
       drwr(0,-30);
       k=i/2;
       if(k*2 == i)
         { sprintf(str,"%3d",i);
           kx = ix-45;
           if(i<100) kx = ix-55;
           if(i<10) kx=ix-75;
           symb(kx,iybas-110,0.0,str);
         }
     }
/*  label vertical axis  */
    ny=mmax/100;
    if(ny>10) ny=10;
    if(mmax == 1000) ny=5;
    if(mmax == 800) ny=4;
    if(mmax == 600) ny=3;
    if(mmax == 200) ny=4;
    if(mmax == 100) ny=4;
    if(mmax == 50) ny=5;
    y=(double)mmax*dy;
    iy = (int)y;
    mova(ixbas,iybas);
    drwr(0,iy);
    for(i=0;i<=ny;i++)
     { ky = i*mmax/ny;
       y = (double)ky * dy;
       iy = (int)y + iybas;
       mova(ixbas,iy);
       drwr(-20,0);
       sprintf(str,"%4d",ky);
       kx = ixbas-150;
       symb(kx,iy-20,0.0,str);
     }
    /*  print label */
    symb(200,3000,0.0,string);
    plotmx();
 }
fpsw(int i)
/* read front panel w=switches on PIO (programable IO) vme module */
  { int l;
    unsigned long swadr=0x570000,*adr,kk;
    adr = (unsigned long *)(pio_adr);
    kk = *adr;
    l = (kk>>i) & 1;
    return(l);
  }
 
    double hstfit(i,l,x)
    int i,l;
    double x;
    {double y;
     y=0.0;
     return(y); 
    }  
onescale(nn,string,n1,k2)  /* nn=bins to display  starting with bin n1 */
 int nn,n1,k2;
 char *string;
 { int mmax,idx,idy,ny,linx,ixbas,iybas,ix,iy,iylst,kx,ky,i,k,ii,iii,n2;
   int idel,ifix,km;
   double dely,y,dy;
   char str[5];
/* ======================= first channel plot kk1 ================== */    
   km=0;
   n2 = n1 + nn;
   erasm();
   mmax=15000;
   if(fmax<14000.0) mmax=14000;
   if(fmax<13000.0) mmax=13000;
   if(fmax<12000.0) mmax=12000;
   if(fmax<11000.0) mmax=11000;
   if(fmax<10000.0) mmax=10000;
   if(fmax<9000.0) mmax=9000;
   if(fmax<8000.0) mmax=8000;
   if(fmax<7000.0) mmax=7000;
   if(fmax<6000.0) mmax=6000;
   if(fmax<5000.0) mmax=5000;
   if(fmax<4000.0) mmax=4000;
   if(fmax<3000.0) mmax=3000;
   if(fmax<2000.0) mmax=2000;
   if(fmax<1000.0) mmax=1000;
   if(fmax<800.0) mmax=800;
   if(fmax<600.0) mmax=600;
   if(fmax<500.0) mmax=500;
   if(fmax<400.0) mmax=400;
   if(fmax<200.0) mmax=200;
   if(fmax<100.0) mmax=100;
   if(fmax<50.0) mmax=50;
   idx = 1600/nn;
   linx = idx*nn;
   ixbas = 100+(2200-linx)/2;
   dy = 2400.0/(double)mmax;
   iybas = 250;
   mova(ixbas,iybas);
   drwr(linx,0);
   mova(ixbas,iybas);
   iylst = 0;
   for(i=n1;i<=n2;i++)
    { if(i<0) ifix=i+2560;
      if(i>=0) ifix=i%2560;
      ii = avg[km][ifix];
      y = (double)ii;
      y = y*dy;
      iy = (int)y;
      idy = iy-iylst;
      drwr(0,idy);
      drwr(idx,0);
      iylst=iy;
    }
      drwr(0,-iylst);

/*  label horizontal axis */
    idel=2;
    if(nn>100) idel=25;
    if(nn>200) idel=50;
    for(i=0;i<nn+2;i=i+idel)
     { ix=ixbas+idx*i;
       mova(ix,iybas);
       drwr(0,-30);
       k=i/2;
       if(k*2 == i)
         { sprintf(str,"%3d",i);
           kx = ix-45;
           if(i<100) kx = ix-55;
           if(i<10) kx=ix-75;
           symb(kx,iybas-110,0.0,str);
         }
     }
/*  label vertical axis  */
    ny=mmax/100;
    if(ny>10) ny=10;
    if(mmax == 1000) ny=5;
    if(mmax == 800) ny=4;
    if(mmax == 600) ny=3;
    if(mmax == 200) ny=4;
    if(mmax == 100) ny=4;
    if(mmax == 50) ny=5;
    y=(double)mmax*dy;
    iy = (int)y;
    mova(ixbas,iybas);
    drwr(0,iy);
    for(i=0;i<=ny;i++)
     { ky = i*mmax/ny;
       y = (double)ky * dy;
       iy = (int)y + iybas;
       mova(ixbas,iy);
       drwr(-20,0);
       sprintf(str,"%4d",ky);
       kx = ixbas-150;
       symb(kx,iy-20,0.0,str);
     }
    /*  print label */
    symb(200,2500,0.0,string);
    plotmx();
 }

set_angle(double absolute)
 { int mode,i;
   unsigned long k,*adr;
   double set,angle;
   angle = absolute/0.018;
   onew = (int)angle;
   set = 0.018*(double)onew;
   odel = onew-current;
/*   printf(" setting angle to %5.1f (multiple of 0.018 step size  %d %d)\n",
   set,odel,current); */
   bsychk();
   if(odel>0) 
    { k = pio_adr + 0x1c;
      adr = (unsigned long *)k;
      *adr = 1;
    }
   if(odel<0)
    { k = pio_adr + 0x1c;
      adr = (unsigned long *)k;
      *adr = 0;
    }
   if(odel != 0)
    {k = pio_adr + 0x18;
     adr = (unsigned long *)k;
     *adr = abs(odel);
    }
   current = onew;
   angle = set;
/*  printf(" setting angle to %5.1f (multiple of 0.018 step size)\n",angle); */
   usleep(1000);
   bsychk();
   usleep(1000);
 }

pulse_diode()
  { unsigned long k,*adr;
    k = pio_adr + 0x24;
    adr = (unsigned long *)k;
    *adr = 0;
  }
  
bsychk()
  { unsigned long k,*adr,kk;
    k=pio_adr+0x20;
    adr = (unsigned long *)k;
loop:
    kk = *adr;
    if(kk == 0) return(0);
/*    printf(" motor busy -- waiting  %x\n",kk);  */
    sleep(1);
    goto loop;
  }
set_motor_direction(int md)   
 { unsigned long k,*adr;
   k = pio_adr + 0x1c;
   adr = (unsigned long *)k;
   *adr = md; /* set the direction */
   k = pio_adr + 0xc;
   adr = (unsigned long *)k;
   *adr = 0; /* enable motor */
 }

