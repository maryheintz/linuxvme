#include <stdio.h>#include <math.h>#include <time.h>#include "vme.h"unsigned long piobase=0x570000,caen_base;unsigned short *caen_data,*caen_prelsb,*caen_premsb,*caen_postlsb,*caen_postmsb,*caen_trigrec, *caen_softtrig,*caen_trigtype,*caen_trigsource,*caen_reset,*caen_start,*caen_interrupt, *caen_chmask;unsigned short cdata[4][3000],raw[4][3000],ped[4][3000],posttrig,endcell,trigrec; int pk[4],ipk[4];unsigned short wd1[4],wd2[4],wd3[4],wd;int dum1[100],ksave,msave,maxsave,dum2[100];double crg[6500],vlt[6500];char xstring[80],ystring[80],string[80],err[80];unsigned int sw_base,vme_base,pio_base;int sw1,sw2,sw3,sw4,sw5,sw6,sw7,sw8;int card,zone,sector;int year,month,day,hour,min,sec;double lim_slp[6] ={0.0140,0.1290,0.1430,0.2720,0.3770,0.5060};double lim_dslp[6] = {0.0014,0.013,0.014,0.027,0.038,0.051};double lim_sgped[6] = {0.008,0.010,0.012,0.012,0.012,0.012};double lim_dymx[6] = {0.03,0.03,0.03,0.03,0.03,0.03};double sn0,sn1;int kdac[300];int ent=0,FAIL,kFAIL;FILE *fp,*fplo,*fphi;main(argc,argv,envs)int argc;char *argv[];char *envs[];{  double t0,tnow,dt;   int cardnumber,ii,i;   unsigned short kkk,stat;   fp = fopen("lin_caen.txt","w");   vme_base = vme_a24_base();   caen_base = 0x460000;   printf("step 1\n");   caen_setup();   printf("step 2\n");   sw_base = vme_base + 0xaa0000;   set_3in1_base(vme_base);   fplo = fopen("caen_lo.txt","w");   fphi = fopen("caen_hi.txt","w");      cardnumber = 0;   printf("step 3\n");    multi_low();    card = 38;    zone = 1;    sector = 1;    FAIL=0;   printf("step 4\n");    chk_digital();    chk_fast();    ii=fclose(fplo);    ii=fclose(fphi);    ii=fclose(fp);}chk_digital()   {int l,i,ok;    unsigned short cadr,sval;    int s1,s2,s3,s4,itr,ire,mse,tpS,tpL,trg;    ok=0;    l = (zone<<12) | (sector<<6) | card;    cadr = (unsigned short)l;    card_sel(cadr);    send13_3in1(2,5);  /* s1=s3=1 s2=s4=0 */    send4_3in1(1,1);   /* itr=1 */    send4_3in1(0,0);   /* ire=0 */    send4_3in1(3,1);   /* mse=1 */    send4_3in1(4,0);   /* tpS=0 */    send4_3in1(5,1);   /* tpL=1 */    send4_3in1(7,0);   /* trig=0 */    read_status(&sval);   /* read back the controller shift register */    i = (int)sval;    trg = (i>>3) & 1;    s1 = (i>>4) & 1;    s2 = (i>>5) & 1;    s3 = (i>>6) & 1;    s4 = (i>>7) & 1;    itr = (i>>8) & 1;    ire = (i>>9) & 1;    mse = (i>>10) & 1;    tpS = (i>>11) & 1;    tpL = (i>>12) & 1;    if( (s1==1) && (s2==0) && (s3==1) && (s4==0) && (itr==1) && (ire==0)         && (mse==1) && (tpS==0) && (tpL==1) && (trg==0) )ok++;    if(sw(2)==1)       {printf("s1..4=1 0 1 0 itr=1 ire=0 mse=1 tpS=0 tpL=1 trg=0 sent  card=%d\n",card);        printf("s1..4=%d %d %d %d itr=%d ire=%d mse=%d tpS=%d tpL=%d trg=%d %x\n"          ,s1,s2,s3,s4,itr,ire,mse,tpS,tpL,trg,i,card);       }    send13_3in1(2,0xa);  /* s1=s3=0 s2=s4=1 */    send4_3in1(1,0);   /* itr=0 */    send4_3in1(0,1);   /* ire=1 */    send4_3in1(3,0);   /* mse=0 */    send4_3in1(4,1);   /* tpS=1 */    send4_3in1(5,0);   /* tpL=0 */    send4_3in1(7,1);   /* trig=1 */    usleep(20);    read_status(&sval);   /* read back the controller shift register */    i = (int)sval;    trg = (i>>3) & 1;    s1 = (i>>4) & 1;    s2 = (i>>5) & 1;    s3 = (i>>6) & 1;    s4 = (i>>7) & 1;    itr = (i>>8) & 1;    ire = (i>>9) & 1;    mse = (i>>10) & 1;    tpS = (i>>11) & 1;    tpL = (i>>12) & 1;    if( (s1==0) && (s2==1) && (s3==0) && (s4==1) && (itr==0) && (ire==1)     && (mse==0) && (tpS==1) && (tpL==0) && (trg==1) )ok++;    if(ok!=2)       { if(sw(2)==1)         {printf("s1..4=0 1 0 1 itr=0 ire=1 mse=0 tpS=1 tpL=0 trg=1 sent\n");          printf("s1..4=%d %d %d %d itr=%d ire=%d mse=%d tpS=%d tpL=%d trg=%d %x\n"            ,s1,s2,s3,s4,itr,ire,mse,tpS,tpL,trg,i);}      }    if(ok != 2)       { printf("card %d not found\n",card);        fprintf(fp,"\n\n Read/Write All Registers: Bad\n");        FAIL=1;      }    if(ok == 2)       { printf("card %d found\n",card);        fprintf(fp,"\n\n Read/Write All Registers: Good\n\n");      } }chk_fast()  { double asum,axsum,axxsum,ped,dped,sig2,aval,yc;    double meanhp,meanhc,meanlp,meanlc;    double sum,xhsump,xxhsump,xhsumc,xxhsumc,xlsump,xxlsump,xlsumc,xxlsumc;    double sighp,sighc,pmaxh,cmaxh,tmaxh;    double siglp,siglc,pmaxl,cmaxl,tmaxl;    int nevnt,nevmax,nstrtev,l,nn,i,k,wait;    int ipeak,timc,timf,kipk;    int dac,time1,time2,time3,time4;    double fdac,charge,val,ratio;    int bigain,kpeak,klo,khi,icnt,icnt1,icnt2,dstep;    double s,sx,sy,sxy,sev,sxev,sxxev,sxest,el,er,ep,estimator;    double sig,sx2,volt,capacitor,a,b,del,x,y,dely;    double pedhi,dpedhi,pedlo,dpedlo;    char xstring[80],ystring[80],string[80],err[80];    unsigned short cadr,tc,tf;    int kpeakh,timfh,kpeakl,timfl;    double ah,bh,al,bl;    double factor,slopeh,dymaxh,noiseh,slopel,dymaxl,noisel;    double mh,sh,ml,sl;    unsigned short sval,dval;    factor = 2000.0 / 4096.0;    caen_setup();    time1 = 0;    time2 = 0;    time3 = 0;    time4 = 0;    set_drawer_timer(zone,sector,1,time1);    set_drawer_timer(zone,sector,2,time2);    set_drawer_timer(zone,sector,3,time3);    set_drawer_timer(zone,sector,4,time4);    multi_low();    i = (zone<<12) | (sector<<6) | card;    cadr = (unsigned short)i;    card_sel(cadr);    send13_3in1(2,0);   /* s1=s2=s3=s4=0 */    send4_3in1(1,0);   /* itr=0 */    send4_3in1(0,1);   /* ire=0 */    send4_3in1(3,1);   /* mse=0 */    send4_3in1(7,1);   /* trig enable */    tc = (unsigned short)25;    tim1_set(tc);   /* coarse */    tf = 0;    tim2_set(tf);   /* fine */    nevmax=50;    pmaxh=0.0;    cmaxh=0.0;    tmaxh=0.0;    pmaxl=0.0;    cmaxl=0.0;    tmaxl=0.0;        dotzro();        hstrst();        dotset(0,250.0,0.0,1500.0,500.0,0,0);        sprintf(xstring,"fine time setting");        sprintf(ystring,"high gain CAEN peak channel amplitude");        dotlbl(0,xstring,ystring);        dotset(1,250.0,0.0,30.0,20.0,0,0);        sprintf(xstring,"fine time setting");        sprintf(ystring,"high gain peak channel number");        dotlbl(1,xstring,ystring);        dotset(2,250.0,0.0,2000.0,1000.0,0,0);        sprintf(xstring,"fine time setting");        sprintf(ystring,"low gain CAEN peak channel amplitude");        dotlbl(2,xstring,ystring);        dotset(3,250.0,0.0,30.0,20.0,0,0);        sprintf(xstring,"fine time setting");        sprintf(ystring,"low gain peak channel number");        dotlbl(3,xstring,ystring);        dotset(4,15.0,0.0,2000.0,0.0,0,0);        sprintf(xstring,"charge");        sprintf(ystring,"high gain CAEN peak");        dotlbl(4,xstring,ystring);        dotset(5,800.0,0.0,2000.0,0.0,0,0);        sprintf(xstring,"charge");        sprintf(ystring,"low gain CAEN peak");        dotlbl(5,xstring,ystring);        dotset(6,15.0,0.0,20.0,-20.0,0,0);        sprintf(xstring,"charge");        sprintf(ystring,"high gain fit yfit-y");        dotlbl(6,xstring,ystring);          dotset(7,800.0,0.0,20.0,-20.0,0,0);        sprintf(xstring,"charge");        sprintf(ystring,"low gain fit yfit-y");        dotlbl(7,xstring,ystring);        dotset(8,15.0,0.0,5.0,-5.0,0,0);        sprintf(xstring,"charge");        sprintf(ystring,"high gain sigma");        dotlbl(8,xstring,ystring);        dotset(9,800.0,0.0,5.0,-5.0,0,0);        sprintf(xstring,"charge");        sprintf(ystring,"low gain sigma");        dotlbl(9,xstring,ystring);        hstset(0,100.0,50.0,50,1);        hstlbl(0,"logain pedestal");        hstset(1,100.0,50.0,50,1);        hstlbl(1,"higain pedestal");        hstset(2,5.0,0.0,50,1);        hstlbl(2,"logain pedestal sigma");        hstset(3,5.0,0.0,50,1);        hstlbl(3,"higain pedestal sigma");/* --------------------- determine higain timing -------------------*/    capacitor = 5.2;    send4_3in1(4,1);   /* enable small C */    send4_3in1(5,0);   /* disable large C */    charge=8.0;    fdac = (1023.0*charge) / (2.0*4.096*capacitor);    dac = (int)fdac;    charge = 2.0 * 4.096 * capacitor * (double)dac / 1023.0;    printf("higain charge=%f dac=%d capacitor=%f\n",         charge,dac,capacitor);    printf("step 5\n");    send13_3in1(6,dac);    printf("step 5\n");    *caen_reset=0;    printf("step 6\n");    usleep(1);    *caen_start=1;    printf("step 7\n");    usleep(1);    inject();    printf("step 8\n");   i=0;   for (timf=0; timf<256; timf=timf+4)  /* start l loop */   { tf = (unsigned short)timf;     tim2_set(tf);    printf("step 9\n");     sum=0.0;      xhsump=0.0;     xxhsump=0.0;     xhsumc=0.0;     xxhsumc=0.0;     for(nevnt=0;nevnt<nevmax;nevnt++)      {    printf("step 10\n");       inject();    printf("step 11\n");/*     go read the CAEN module ------------------------------- */        caen_read();    printf("step 12\n");/*     display ? */         sw1 = sw(1);         if(sw1 == 1)           { asum = 0.0;            axsum = 0.0;            axxsum = 0.0;            for(i=10;i<20;i++)             { aval = (double)cdata[0][i];               asum = asum+1.0;               axsum = axsum + aval;               axxsum = axxsum + aval*aval;              }            ped = axsum / asum;            dped = 0.0;            sig2=axxsum/asum - ped*ped;            if(sig2>0.0) dped=sqrt(sig2);            sprintf(string,              "hi gain ipk=%d  pk=%d  ped=%f +/- %f",              ipk[0],pk[0],ped,dped);            evdisp(32,string,0);}/* now gets sums for mean calculation */       sum=sum+1.0;       kipk = ipk[0];       yc=(double)cdata[0][kipk];       xhsumc=xhsumc+yc;       xxhsumc=xxhsumc+yc*yc;       yc=(double)kipk;       xhsump=xhsump+yc;       xxhsump=xxhsump+yc*yc;     } /* end of nevnt loop *//*  now get mean  */   meanhp=xhsump/sum;   sighp=0.0;   sig2=xxhsump/sum-meanhp*meanhp;   if(sig2>0.0) sighp=sqrt(sig2);   meanhc=xhsumc/sum;   sighc=0.0;   sig2=xxhsumc/sum-meanhc*meanhc;   if(sig2>0.0) sighc=sqrt(sig2);   sw3 = sw(3);   if(sw3 == 1)     { printf("\n timer=%d sum=%f\n",timf,sum);        printf("       meanhp=%f sighp=%f\n",meanhp,sighp);       printf("       meanhc=%f sighc=%f\n",meanhc,sighc);     }   printf("high gain timer=%d channel=%6.1f peak=%5.1f\n",    timf,meanhp,meanhc);   if(meanhc>pmaxh && timf<125)    { pmaxh=meanhc;      cmaxh=meanhp;      tmaxh=timf; }   dotacc(0,(double)timf,meanhc);   dotacc(1,(double)timf,meanhp);   }  /* end of dac loop *//* --------------------- determine logain timing -------------------*/    capacitor = 100.0;    send4_3in1(4,0);   /* disable small C */    send4_3in1(5,1);   /* dnable large C */    charge=700.0;    fdac = (1023.0*charge) / (2.0*4.096*capacitor);    dac = (int)fdac;    charge = 2.0 * 4.096 * capacitor * (double)dac / 1023.0;    printf("higain charge=%f dac=%d capacitor=%f\n",         charge,dac,capacitor);    for(i=0;i<dac;i++) send13_3in1(6,i);    send13_3in1(6,dac);    inject();   i=0;   for (timf=0; timf<256; timf=timf+4)  /* start l loop */   { tf = (unsigned short)timf;     tim2_set(tf);     sum=0.0;     xlsump=0.0;     xxlsump=0.0;     xlsumc=0.0;     xxlsumc=0.0;     for(nevnt=0;nevnt<nevmax;nevnt++)      {inject();/*     go read the CAEN module ------------------------------- */        caen_read();/*     display ? */         sw1 = sw(1);         if(sw1 == 1)           { asum = 0.0;            axsum = 0.0;            axxsum = 0.0;            for(i=10;i<20;i++)             { aval = (double)cdata[1][i];               asum = asum+1.0;               axsum = axsum + aval;               axxsum = axxsum + aval*aval;              }            ped = axsum / asum;            dped = 0.0;            sig2=axxsum/asum - ped*ped;            if(sig2>0.0) dped=sqrt(sig2);            sprintf(string,              "lo gain ipk=%d  pk=%d  ped=%f +/- %f",              ipk[1],pk[1],ped,dped);            evdisp(32,string,1);}/* now gets sums for mean calculation */       kipk = ipk[1];       sum=sum+1.0;       yc=(double)cdata[1][kipk];       xlsumc=xlsumc+yc;       xxlsumc=xxlsumc+yc*yc;       yc=(double)kipk;       xlsump=xlsump+yc;       xxlsump=xxlsump+yc*yc;     } /* end of nevnt loop *//*  now get mean  */   meanlp=xlsump/sum;   siglp=0.0;   sig2=xxlsump/sum-meanlp*meanlp;   if(sig2>0.0) siglp=sqrt(sig2);   meanlc=xlsumc/sum;   siglc=0.0;   sig2=xxlsumc/sum-meanlc*meanlc;   if(sig2>0.0) siglc=sqrt(sig2);   sw3 = sw(3);   if(sw3 == 1)     { printf("\n timer=%d sum=%f\n",timf,sum);        printf("       meanlp=%f siglp=%f\n",meanlp,siglp);       printf("       meanlc=%f siglc=%f\n",meanlc,siglc);     }   printf(" low gain timer=%d channel=%6.1f peak=%5.1f\n",    timf,meanlp,meanlc);   if(meanlc>pmaxl && timf<125)    { pmaxl=meanlc;      cmaxl=meanlp;      tmaxl=timf; }   dotacc(2,(double)timf,meanlc);   dotacc(3,(double)timf,meanlp);   }  /* end of dac loop *//*   show the plots */     printf("pmaxh=%f cmaxh=%f tmaxh=%f\n",pmaxh,cmaxh,tmaxh);     printf("pmaxl=%f cmaxl=%f tmaxl=%f\n",pmaxl,cmaxl,tmaxl);/* ---------------- high gain calibration ----------------------*/    capacitor = 5.2;    send4_3in1(4,1);   /* enable small C */    send4_3in1(5,0);   /* disable large C */   kpeak=(int)(cmaxh+0.5);   klo=kpeak-2;   khi=kpeak+2;   timf=(int)(tmaxh+0.5);   printf("starting higain  kpeak=%d timf=%d\n",kpeak,timf);   kpeakh = kpeak;   timfh = timf;   tf = (unsigned short)timf;   tim2_set(tf);   icnt=0;   s=0.0;   sx=0.0;   sy=0.0;   sxy=0.0;   sx2=0.0;   dstep = 2;      for (dac=0; dac<400; dac=dac+dstep)     {send13_3in1(6,dac);      volt = 2.0 * 4.096 * (double)dac/1023.0;      charge = volt * capacitor;      if(charge<0.0) continue;      sev = 0.0;      sxev = 0.0;      sxxev = 0.0;      sxest = 0.0;      for(nevnt=0;nevnt<nevmax;nevnt++)       {inject();/*     go read the CAEN module ------------------------------- */        caen_read();/*     display ? */         sw1 = sw(1);         if(sw1 == 1)           { asum = 0.0;            axsum = 0.0;            axxsum = 0.0;            for(i=10;i<20;i++)             { aval = (double)cdata[0][i];               asum = asum+1.0;               axsum = axsum + aval;               axxsum = axxsum + aval*aval;              }            ped = axsum / asum;            dped = 0.0;            sig2=axxsum/asum - ped*ped;            if(sig2>0.0) dped=sqrt(sig2);            sprintf(string,              "hi gain ipk=%d  pk=%d  ped=%f +/- %f",              ipk[0],pk[0],ped,dped);            evdisp(32,string,0);}        asum = 0.0;        axsum = 0.0;        axxsum = 0.0;        for(i=10;i<20;i++)         { aval = (double)cdata[0][i];           asum = asum+1.0;           axsum = axsum + aval;           axxsum = axxsum + aval*aval;          }        kipk = ipk[0];        ped = axsum / asum;        hstacc(1,ped,1.0);        sig2=axxsum/asum - ped*ped;        if(sig2>0.0) dped=sqrt(sig2);        hstacc(3,dped,1.0);        if(cdata[0][kipk]>4090) goto fithi;        val = (double)cdata[0][kpeak] - ped;        el = (double)cdata[0][kpeak-1] - ped;        er = (double)cdata[0][kpeak+1] - ped;        ep = val;        estimator = (el-er)/ep;        if(kipk>=klo && kipk<=khi && cdata[0][kpeak]<4090)         { sev = sev + 1.0;           sxev = sxev + val;           sxxev = sxxev + val*val;           sxest = sxest + estimator;         }             } /* end of nevnt loop */        val=0.0;        if(sev>0.0)           {val = sxev / sev;           estimator = sxest / sev;           printf(" high gain dac=%d charge=%5.2f fmean=%6.2f\n",           dac,charge,val);           dotacc(4,charge,val);	/*   fprintf(fphi,"%f %f\n",charge,val);  */           sig=0.0;           sig2=sxxev/sev - val*val;           if(sig2>0.0) sig=sqrt(sig2);           if(val>0.0) dotacc(8,charge,sig);          }        if(val>0.0 && val<4090.0)         { crg[icnt] = charge;           vlt[icnt] = val;           if(charge>0.0)           { s = s +1.0;              sx = sx + charge;              sy = sy + val;              sxy = sxy + charge*val;              sx2 = sx2 + charge*charge;}           icnt++; }   }  /* end of dac loop */   icnt1=icnt;   printf(" end of dac loop icnt=%d\n",icnt);fithi:   del = s*sx2 - sx*sx;   a = (sx2*sy - sx*sxy) / del;   b = (s*sxy - sx*sy) / del;   printf(" higain fit results a=%7.2f b=%7.2f y=a+b*charge\n",a,b);   ah = a;   bh = b;   slopeh = bh*factor;   s = 0.0;   sx = 0.0;   for(k=0;k<icnt;k++)    {x = crg[k];     y = a + b*x;     dely = y - vlt[k];     s = s + 1.0;     sx = sx + fabs(dely);     sw3 = sw(3);     if(sw3 == 1) printf("k=%d x=%f  y=%f  vlt[k]=%f  dely=%f\n",       k,x,y,vlt[k],dely);     dotacc(6,x,dely);    }   dymaxh = factor * (sx/s);/* ---------------------- low gain calibration --------------------------*/    capacitor = 100.0;    send4_3in1(4,0);   /* disable small C */    send4_3in1(5,1);   /* enable large C */   kpeak=(int)(cmaxl+0.5);   klo=kpeak-2;   khi=kpeak+2;   timf=(int)(tmaxl+0.5);   printf("starting logain  kpeak=%d timf=%d\n",kpeak,timf);   kpeakl = kpeak;   timfl = timf;   tf = (unsigned short)timf;   tim2_set(tf);   icnt=0;   s=0.0;   sx=0.0;   sy=0.0;   sxy=0.0;   sx2=0.0;   dstep = 2;   for (dac=0; dac<1024; dac=dac+dstep)     {send13_3in1(6,dac);      volt = 2.0 * 4.096 * (double)dac/1023.0;      charge = volt * capacitor;      sev = 0.0;      sxev = 0.0;      sxxev = 0.0;      sxest = 0.0;      for(nevnt=0;nevnt<nevmax;nevnt++)       {inject();/*     go read the CAEN module ------------------------------- */        caen_read();/*     display ? */         sw1 = sw(1);         if(sw1 == 1)           { asum = 0.0;            axsum = 0.0;            axxsum = 0.0;            for(i=10;i<20;i++)             { aval = (double)cdata[1][i];               asum = asum+1.0;               axsum = axsum + aval;               axxsum = axxsum + aval*aval;              }            ped = axsum / asum;            dped = 0.0;            sig2=axxsum/asum - ped*ped;            if(sig2>0.0) dped=sqrt(sig2);            sprintf(string,              "lo gain ipk=%d  pk=%d  ped=%f +/- %f",              ipk[1],pk[1],ped,dped);            evdisp(32,string,1);}        asum = 0.0;        axsum = 0.0;        axxsum = 0.0;        for(i=10;i<20;i++)         { aval = (double)cdata[1][i];           asum = asum+1.0;           axsum = axsum + aval;           axxsum = axxsum + aval*aval;          }        kipk = ipk[1];        ped = axsum / asum;        hstacc(0,ped,1.0);        sig2=axxsum/asum - ped*ped;        if(sig2>0.0) dped=sqrt(sig2);        hstacc(2,dped,1.0);        if(cdata[1][kipk]>4090) goto lofit;        val = (double)cdata[1][kpeak] - ped;        el = (double)cdata[1][kpeak-1] - ped;        er = (double)cdata[1][kpeak+1] - ped;        ep = val;        estimator = (el-er)/ep;        if(kipk>=klo && kipk<=khi && cdata[1][kpeak]<4090)         { sev = sev + 1.0;           sxev = sxev + val;           sxxev = sxxev + val * val;           sxest = sxest + estimator;         }      } /* end of nevnt loop */        val=0.0;        if(sev>0.0)           {val = sxev / sev;           estimator = sxest / sev;           printf("  low gain dac=%d charge=%6.2f fmean=%6.2f\n",           dac,charge,val);           dotacc(5,charge,val);	/*   fprintf(fplo,"%f %f\n",charge,val);  */           sig=0.0;           sig2=sxxev/sev - val*val;           if(sig2>0.0) sig=sqrt(sig2);           if(val>0.0) dotacc(9,charge,sig);          }        if(val>0.0 && val<4090.0)         { crg[icnt] = charge;           vlt[icnt] = val;           if(charge>50.0)            { s = s +1.0;              sx = sx + charge;              sy = sy + val;              sxy = sxy + charge*val;              sx2 = sx2 + charge*charge;}           icnt++; }   }  /* end of dac loop */   icnt2=icnt;   printf(" end of dac loop icnt=%d\n",icnt);   printf(" end of dac loop icnt1=%d  icnt2=%d\n",icnt1,icnt2);lofit:   del = s*sx2 - sx*sx;   a = (sx2*sy - sx*sxy) / del;   b = (s*sxy - sx*sy) / del;   al = a;   bl = b;   slopel = bl*factor;   printf(" logain fit results a=%7.2f b=%7.2f y=a+b*charge\n",a,b);   s = 0.0;   sx = 0.0;   for(k=0;k<icnt;k++)    {x = crg[k];     y = a + b*x;     dely = y - vlt[k];     s = s + 1.0;     sx = sx + fabs(dely);     sw3 = sw(3);     if(sw3 == 1) printf("k=%d x=%f  y=%f  vlt[k]=%f  dely=%f\n",k,x,y,vlt[k],dely);     dotacc(7,x,dely);    }    dymaxl = factor * (sx/s);    ratio = bh/bl;    if(sw(8) == 0)     { sidev(1);       dotmwr(2,0,1);       dotmwr(2,2,3);       dotwrt(4);       dotwrt(5);       dotwrt(6);       dotwrt(7);       dotwrt(8);       dotwrt(9);       hstwrt(0);       hstwrt(1);       hstwrt(2);       hstwrt(3);     }   /*------------------ test the trigger output ----------------- */    capacitor = 100.0;    send4_3in1(4,0);   /* disable small C */    send4_3in1(5,1);   /* dnable large C */    charge=150.0;    fdac = (1023.0*charge) / (2.0*4.096*capacitor);    dac = (int)fdac;    charge = 2.0*4.096 * capacitor * (double)dac / 1023.0;    printf("higain charge=%f dac=%d capacitor=%f\n",         charge,dac,capacitor);    send13_3in1(6,dac);    for(k=0;k<3;k++)      { if(k==0) send4_3in1(7,1);   /* enable the  output */        if(k==1) send4_3in1(7,0);   /* disable the trig output */        if(k==2) send4_3in1(7,1);   /* enable the trig output */        inject();        caen_read();        asum = 0.0;        axsum = 0.0;        axxsum = 0.0;        for(i=10;i<20;i++)          { aval = (double)cdata[3][i];            asum = asum+1.0;            axsum = axsum + aval;            axxsum = axxsum + aval*aval;          }        ped = axsum / asum;        dped = 0.0;        sig2=axxsum/asum - ped*ped;        if(sig2>0.0) dped=sqrt(sig2);        sprintf(string,             "hi gain ipk=%d  pk=%d  ped=%f +/- %f",             ipk[3],pk[3],ped,dped);        if(sw(8) == 0) evdisp(32,string,0);      }   hstmsg(3,&mh,&sh);   kFAIL=0;   if(slopeh<68.0) kFAIL=1;   if(slopeh>95.0) kFAIL=2;   if(noiseh>5.0) kFAIL=3;   if(dymaxh>30.0) kFAIL=4;   if(kFAIL != 0) FAIL = 1;   noiseh = factor*mh;   printf("high gain noise=%f slope=%f nonlin=%f\n",noiseh,slopeh,dymaxh);      if(kFAIL == 0) fprintf(fp,"high gain   noise=%6.2f slope=%6.2f nonlin=%6.2f   OK\n",           noiseh,slopeh,dymaxh);   if(kFAIL != 0) fprintf(fp,"high gain   noise=%6.2f slope=%6.2f nonlin=%6.2f  BAD=%d\n",           noiseh,slopeh,dymaxh,kFAIL);   hstmsg(2,&ml,&sl);   kFAIL = 0;   if(slopel<1.0) kFAIL=1;   if(slopel>1.5) kFAIL=2;   if(noisel>5.0) kFAIL=3;   if(dymaxl>30.0) kFAIL=4;   if(kFAIL != 0) FAIL = 1;   noisel = factor*ml;   printf(" low gain  noise=%f slope=%f nonlin=%f\n",noisel,slopel,dymaxl);   if(kFAIL == 0) fprintf(fp," low gain   noise=%6.2f slope=%6.2f nonlin=%6.2f   OK\n",           noisel,slopel,dymaxl);   printf(" low gain  noise=%f slope=%f nonlin=%f\n",noisel,slopel,dymaxl);   if(kFAIL != 0) fprintf(fp," low gain   noise=%6.2f slope=%6.2f nonlin=%6.2f  BAD=%d\n",           noisel,slopel,dymaxl,kFAIL);   printf("card=%d bh=%f  bl=%f  ratio=%f   ---------------- ifail=%d\n\n",      card,bh,bl,ratio,FAIL);   fprintf(fp,"Gain Ratio=%6.2f\n\n",ratio);  }evdisp(nn,string,l) int nn,l; char *string; { int max,mmax,idx,idy,ny,linx,ixbas,iybas,ix,iy,iylst,kx,ky,i,k,ii;   int idel;   double dely,y,dy;   char str[5];   erasm();   max = pk[l];   mmax=5000;   if(max<4000) mmax=4000;   if(max<3000) mmax=3000;   if(max<2000) mmax=2000;   if(max<1000) mmax=1000;   if(max<800) mmax=800;   if(max<600) mmax=600;   if(max<500) mmax=500;   if(max<400) mmax=400;   if(max<200) mmax=200;   if(max<100) mmax=100;   if(max<50) mmax=50;   idx = 1600/nn;   linx = idx*nn;   ixbas = 100+(2200-linx)/2;   dy = 2400.0/(double)mmax;   iybas = 400;   mova(ixbas,iybas);   drwr(linx,0);   mova(ixbas,iybas);   iylst = 0;   for(i=0;i<nn;i++)    { ii = cdata[l][i];      y = (double)ii;      y = y*dy;      iy = (int)y;      idy = iy-iylst;      drwr(0,idy);      drwr(idx,0);      iylst=iy;    }      drwr(0,-iylst);/*  label horizontal axis */    idel=10;    if(nn>100) idel=25;    if(nn>200) idel=50;    for(i=0;i<nn+1;i=i+idel)     { ix=ixbas+idx*i;       mova(ix,iybas);       drwr(0,-30);       k=i/2;       if(k*2 == i)         { sprintf(str,"%3d",i);           kx = ix-45;           if(i<100) kx = ix-55;           if(i<10) kx=ix-75;           symb(kx,iybas-100,0.0,str);         }     }/*  label vertical axis  */    ny=mmax/100;    if(ny>10) ny=10;    if(mmax == 200) ny=4;    if(mmax == 100) ny=4;    if(mmax == 50) ny=5;    y=(double)mmax*dy;    iy = (int)y;    mova(ixbas,iybas);    drwr(0,iy);    for(i=0;i<=ny;i++)     { ky = i*mmax/ny;       y = (double)ky * dy;       iy = (int)y + iybas;       mova(ixbas,iy);       drwr(-20,0);       sprintf(str,"%4d",ky);       kx = ixbas-150;       symb(kx,iy-20,0.0,str);     }    /*  print label */    symb(200,3000,0.0,string);    plotmx(); }    double hstfit(i,l,x)    int i,l;    double x;    {double y;     y=0.0;     return(y);     }  inject() { *caen_reset=0;   usleep(1);   *caen_start=1;   usleep(1);   tp_high();   usleep(100);   setime();   usleep(100);   wd = *caen_interrupt;   /* printf("interrupt=%d  vernier=%d    %d\n",wd&1,wd2[0],maxsave-wd2[0]);  */   if(wd & 1 == 0)     { printf(" error - no caen interrupt bit set \n");        exit(0);     }   } fpsw(int i)  { int ent=0,l;    unsigned long *pio,kk;    if(ent==0)       { pio_base = vme_base + 0x570000;        pio = (unsigned long *)pio_base;        ent=1;}    kk = *pio;    l = (kk>>i) & 1;/*    printf(" fpsw i=%d  val=%d\n",i,l);  */    return(l);  } sw(i) int i; { int k,l,shift;   unsigned short *adr;   (unsigned short *)adr = (unsigned short *)(sw_base + 0x0c);   k = *adr;   shift = i-1;   l = (k>>shift) & 1;   return(l); }    caen_setup()      { unsigned short k1,k2,j1,j2,pre;        /* test write-read to caen v1729 */	caen_prelsb = (unsigned short*)(vme_base+caen_base+0x1800);          *caen_prelsb = 0xaa;	usleep(1);	k1 = *caen_prelsb;	k2 = k1 & 0xff;	printf("sent=0xaa  read back=%x %x\n",k1,k2);	if(k2 != 0xaa) exit(0);          /* ========== issue reset ========== */        caen_reset = (unsigned short*)(vme_base+caen_base+0x0800);        *caen_reset=0;  	/* ========== setup pretrig ========== */	pre = 10;	caen_prelsb = (unsigned short*)(vme_base+caen_base+0x1800);  	caen_premsb = (unsigned short*)(vme_base+caen_base+0x1900); 	k1 = (pre & 0xff);	k2 = ((pre>>8) & 0xff);        *caen_prelsb = k1;        *caen_premsb = k2;	j1 = *caen_prelsb & 0xff;	j2 = *caen_premsb & 0xff;        /* ========== setup posttrig ========== */	posttrig = 0;	caen_postlsb = (unsigned short*)(vme_base+caen_base+0x1a00);	caen_postmsb = (unsigned short*)(vme_base+caen_base+0x1b00);        *caen_postlsb = posttrig & 0xff;        *caen_postmsb = (posttrig>>8) & 0xff;        /* ========== setup the trigger source ========== */	caen_trigsource = (unsigned short*)(vme_base+caen_base+0x1e00);	*caen_trigsource = 0;        /* ========== channel mask - store data for all 4 channels ========== */	caen_chmask = (unsigned short*)(vme_base+caen_base+0x2300);	*caen_chmask = 0xf;        /* ========== setup triger type ========== */	caen_trigtype = (unsigned short*)(vme_base+caen_base+0x1d00);	*caen_trigtype = 0x2;        caen_start = (unsigned short*)(vme_base+caen_base+0x1700);	caen_trigrec = (unsigned short*)(vme_base+caen_base+0x2000);	caen_data = (unsigned short*)(vme_base+caen_base+0x0d00);	caen_softtrig = (unsigned short*)(vme_base+caen_base+0x1c00);	caen_interrupt = (unsigned short*)(vme_base+caen_base+0x8000);      }          caen_read()        { int i,kk,k,m,shift;          unsigned short wd;	  unsigned short tr;	  double dshift; 	  tr = *caen_trigrec;	  trigrec = tr & 0xff;          shift = 2560*(128-trigrec)/128;	  /* printf(" tr=%x  trigrec=%d  endcell=%d\n",tr,trigrec,endcell);   */	  endcell = (20*(posttrig+trigrec))%128;	     wd1[3]=*caen_data;	     wd1[2]=*caen_data;	     wd1[1]=*caen_data;	     wd1[0]=*caen_data;	     wd2[3]=*caen_data;	     wd2[2]=*caen_data;	     wd2[1]=*caen_data;	     wd2[0]=*caen_data;	     wd3[3]=*caen_data;	     wd3[2]=*caen_data;	     wd3[1]=*caen_data;	     wd3[0]=*caen_data;	     /* calculate the vernier time shift */	     dshift = -0.02222*(double)wd2[0] +148.88;	     shift = shift + (int)dshift;	     for(i=0;i<2560;i++) 	      { wd=*caen_data;	        raw[3][i] = wd & 0xfff;	        wd=*caen_data;	        raw[2][i] = wd & 0xfff;	        wd=*caen_data;	        raw[1][i] = wd & 0xfff;	        wd=*caen_data;	        raw[0][i] = wd & 0xfff;	      }	  msave = 0;	  ksave = 0;	  maxsave = 0;/* ==============          for(m=0;m<4;m++) =============== */          for(m=0;m<4;m++)	   ipk[m]=0;	   pk[m]=0;	   { for(i=0;i<2560;i++)	       {  kk = 2560+i-endcell;	         k = kk%2560;                 k=i-shift;		 if(k<0) k=k+2560;		 if(k>2560) k=k-2560;	         cdata[m][k]=raw[m][i]-ped[m][i];  		 if(cdata[m][k]>maxsave)		  { msave = m;		    ksave = k;		    maxsave = cdata[m][k];		    ipk[m]=k;		    pk[m]=maxsave;		    /* printf("m=%d  k=%d  max=%d\n",msave,ksave,maxsave); */		  }	       }            }	 }	