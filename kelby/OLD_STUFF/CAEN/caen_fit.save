#include <stdio.h>
#include <string.h>
#include <math.h>
#include <time.h>
#include "vme.h"
#include "machine.h"
unsigned long vmebase,piobase=0x570000;
short *caen_data,*caen_prelsb,*caen_premsb,*caen_postlsb,*caen_postmsb,*caen_trigrec,
 *caen_softtrig,*caen_trigtype,*caen_trigsource,*caen_reset,*caen_start,*caen_interrupt,
 *caen_chmask;
int ksave,msave,maxsave;
double p[10];
short cdata[4][3000],raw[4][3000],ped[4][3000],posttrig,endcell,trigrec; 
short wd1[4],wd2[4],wd3[4],wd;
char string[80];

extern double tol;
extern int prin, maxfun;
int npnts;
double chisq1,aguess,tguess;
int prnt;
double xk[300],yk[300];
double yfit[300],sigmay[300];
FILE *fp;
main(argc,argv,envs)
int argc;
char *argv[];
char *envs[];
  { int icap,n1,m,i,event,nn;
    int dac,alarm;
    double rn1,rn2;
extern double functn();  
extern double ranf();
extern double chisqr();
extern double praxis();
    fp = fopen("test.txt","w");
    dotset(0,1500.1250,0.0,150.0,0.0,0,0);
    dotset(1,80.0,40.0,2300.0,1300.0,0,0);
    hstset(0,2300.0,1300.0,100,0);
    hstset(1,1400.0,1300.0,100,0);
    hstset(2,2200.0,2100.0,100,0);
    vmebase = vme_a24_base();
    prnt=1;
    prin=1;
    p[0]= 0.625;
    p[1]= -1050.0;
    p[2]= 1200.0;
    p[3]= 1800.0;
    icap = 0;
    printf(" calling caen_setup\n");
        caen_setup();
	usleep(2);  
    printf(" returned from caen_setup\n");
	sidev(1);  /* force plot to screen without asking*/
/* ========== get the pedestals ================ */
    printf("stop pulsing then hit return\n");
    i = getchar();
    *caen_trigtype = 0;
    for(m=0;m<4;m++)
      { for(i=0;i<2560;i++)
	 { ped[m][i] = 0;;
	 }
      }
    for(i=0;i<10;i++)
      { *caen_reset=0;
        usleep(10);
        *caen_start=1;
        usleep(10000);
        *caen_softtrig=0;;
       usleep(10000);
       /* check if caen got a trigger */
       wd = *caen_interrupt;
       /* printf("interrupt=%d  vernier=%d    %d\n",wd&1,wd2[0],maxsave-wd2[0]);  */
       if(wd & 1 == 0)
         { printf(" error - no caen interrupt bit set \n");
	   exit(0);
	 }
       caen_read();
       for(m=0;m<4;m++)
         { for(i=0;i<2560;i++)
	    { ped[m][i]=ped[m][i] + raw[m][i];
	    }
	 }
       }
       for(m=0;m<4;m++)
         { for(i=0;i<2560;i++)
	    { ped[m][i]=ped[m][i]/10;
	    }
	 }

    printf("start pulsing then hit return\n");
    i = getchar();
    printf(" starting event loop\n");
	*caen_trigtype = 0x2;
	event=0;
 loop:         
    p[0]= 0.47;
    p[1]= -760.0;
    p[2]= 1200.0;
    p[3]= 2200.0;
       *caen_reset=0;
       usleep(10);
       *caen_start=1;
       usleep(10000);
       inject();
       usleep(10000);
       /* check if caen got a trigger */
       wd = *caen_interrupt;
       /* printf("interrupt=%d  vernier=%d    %d\n",wd&1,wd2[0],maxsave-wd2[0]);  */
       if(wd & 1 == 0)
         { printf(" error - no caen interrupt bit set \n");
	   goto loop;
	 }
       caen_read();
       dotacc(0,(double)ksave,(double)trigrec);
       dotacc(1,(double)(ksave-1300),(double)wd2[0]);
       hstacc(0,(double)wd2[0],1.0);
       hstacc(1,(double)wd2[0],1.0);
       hstacc(2,(double)wd2[0],1.0);
       npnts=250;
       for(i=0;i<250;i++)
         { xk[i] = 1500.0 + (double)i;
	   yk[i] = cdata[0][i+1500];
	   sigmay[i] = 50.0;
	   if(yk[i]>25.0) sigmay[i] = sqrt(yk[i]);
	 }
       rn1 = chisqr();
       printf("rn1=%f   p=%f  %f  %f  %f\n",rn1,p[0],p[1],p[2],p[3]);
          if(icap == 0) sprintf(string,"LOW GAIN  peak=%d  trigrec=%d  bins=%d-%d  vernier=%d",
	     ksave,trigrec,n1,n1+250,wd2[0]);
          if(icap == 1) sprintf(string,"HIGH GAIN  input=%d    bins=%d-%d",msave,n1,n1+250);
          msave=0;
          nn=ksave/250;
          n1=nn*250;
	  printf(" ksave=%d  nn=%d  n1=%d\n",ksave,nn,n1);
          onedisp(250,string,n1,msave);
       rn2 = praxis(chisqr,p,4);
       rn2 = chisqr();
       printf("praxis return rn2=%f   p=%f  %f  %f %f\n",rn2,p[0],p[1],p[2],p[3]);
       for(i=0;i<250;i++) fprintf(fp,"i=%d  yfit=%f\n",i,yfit[i]);
/*       if(fpsw(0)==1 && maxsave>2500)
        { msave=0;
          n1=ksave-125;
          n1=n1-n1%250+250;
          if(icap == 0) sprintf(string,"LOW GAIN  peak=%d  trigrec=%d  bins=%d-%d  vernier=%d",
	     ksave,trigrec,n1,n1+250,wd2[0]);
          if(icap == 1) sprintf(string,"HIGH GAIN  input=%d    bins=%d-%d",msave,n1,n1+250);
          onedisp(250,string,n1,msave);
        }  */ 
	usleep(1);
	if(fpsw(5)==1) dotwrt(0);
	if(fpsw(5)==1) dotwrt(1);
	if(fpsw(4)==1) hstwrt(0);
	if(fpsw(4)==1) hstwrt(1);
	if(fpsw(4)==1) hstwrt(2);
        event++;
	wtstreg(event);
          goto loop;
   }  /* end of main */
   
    caen_setup()
      { short k1,k2,j1,j2,pre;
        /* test write-read to caen v1729 */
	caen_prelsb = (short*)(vmebase+0x661800);  
        *caen_prelsb = 0xaa;
	usleep(1);
	k1 = *caen_prelsb;
	k2 = k1 & 0xff;
	printf("sent=0xaa  read back=%x %x\n",k1,k2);
	if(k2 != 0xaa) exit(0);
 
         /* ========== issue reset ========== */
        caen_reset = (short*)(vmebase+0x660800);
        *caen_reset=0;
 
 	/* ========== setup pretrig ========== */
	pre = 10;
	caen_prelsb = (short*)(vmebase+0x661800);  
	caen_premsb = (short*)(vmebase+0x661900); 
	k1 = (pre & 0xff);
	k2 = ((pre>>8) & 0xff);

        *caen_prelsb = k1;
        *caen_premsb = k2;
	j1 = *caen_prelsb & 0xff;
	j2 = *caen_premsb & 0xff;

        /* ========== setup posttrig ========== */
	posttrig = 0;
	caen_postlsb = (short*)(vmebase+0x661a00);
	caen_postmsb = (short*)(vmebase+0x661b00);
        *caen_postlsb = posttrig & 0xff;
        *caen_postmsb = (posttrig>>8) & 0xff;

        /* ========== setup the trigger source ========== */
	caen_trigsource = (short*)(vmebase+0x661e00);
	*caen_trigsource = 0;

        /* ========== channel mask - store data for all 4 channels ========== */
	caen_chmask = (short*)(vmebase+0x662300);
	*caen_chmask = 0xf;

        /* ========== setup triger type ========== */
	caen_trigtype = (short*)(vmebase+0x661d00);
	*caen_trigtype = 0x2;

        caen_start = (short*)(vmebase+0x661700);
	caen_trigrec = (short*)(vmebase+0x662000);
	caen_data = (short*)(vmebase+0x660d00);
	caen_softtrig = (short*)(vmebase+0x661c00);
	caen_interrupt = (short*)(vmebase+0x668000);

      }
      
    caen_read()
        { int i,kk,k,m,shift;
          unsigned short wd;
	  short tr;
	  msave=0;
	  ksave=0;
	  maxsave=0;
 	  tr = *caen_trigrec;
	  trigrec = tr & 0xff;
          shift = 2560*(128-trigrec)/128;
	  /* printf(" tr=%x  trigrec=%d  endcell=%d\n",tr,trigrec,endcell);   */
	  endcell = (20*(posttrig+trigrec))%128;
	     wd1[3]=*caen_data;
	     wd1[2]=*caen_data;
	     wd1[1]=*caen_data;
	     wd1[0]=*caen_data;
	     wd2[3]=*caen_data;
	     wd2[2]=*caen_data;
	     wd2[1]=*caen_data;
	     wd2[0]=*caen_data;
	     wd3[3]=*caen_data;
	     wd3[2]=*caen_data;
	     wd3[1]=*caen_data;
	     wd3[0]=*caen_data;
	     for(i=0;i<2560;i++) 
	      { wd=*caen_data;
	        raw[3][i] = wd & 0xfff;
	        wd=*caen_data;
	        raw[2][i] = wd & 0xfff;
	        wd=*caen_data;
	        raw[1][i] = wd & 0xfff;
	        wd=*caen_data;
	        raw[0][i] = wd & 0xfff;
	      }
          for(m=0;m<4;m++)
	   { for(i=0;i<2560;i++)
	       {  kk = 2560+i-endcell;
	         k = kk%2560;
                 k=i-shift;
		 if(k<0) k=k+2560;
		 if(k>2560) k=k-2560;
	         cdata[m][k]=raw[m][i]-ped[m][i];  
		 /* if(m==0) printf(" i=%d  raw=%d  k=%d  cdata=%d\n",i,raw[0][i],k,cdata[0][k]); */
	         /* cdata[m][i]=raw[m][i]; */ /* just copy through for now */
		 if(cdata[m][k]>maxsave)
		  { msave=m;
		    ksave=k;
		    maxsave=cdata[m][k];
		    /* printf("m=%d  k=%d  max=%d\n",msave,ksave,maxsave);  */
		  }
	       } 
           }
	 }	

     inject()
       { unsigned long *adr;
 /* write to PIO vme module (programable io) */
 /* let one trigger pulse through to the CAEN v1729 */
        (unsigned long *)adr = (unsigned long *)(vmebase+0x570000+0x4);
        *adr = 0;
       }
  
onedisp(nn,string,n1,m)  /* nn=bins to display  starting with bin n1 */
 int nn,n1,m;
 char *string;
 { int max,mmax,idx,idy,ny,linx,ixbas,iybas,ix,iy,iylst,kx,ky,i,k,ii,iii,n2;
   int idel,ifix;
   double dely,y,dy;
   char str[5];
   erasm();
/* ======================= first channel plot kk1 ================== */    
   max = 0;
   n2 = n1 + nn;
   for(iii=n1; iii<n2; iii++) 
     {  if(iii<0) ifix=iii+2560;
        if(iii>=0) ifix=iii%2560;
        if (max < cdata[m][ifix]) max = cdata[m][ifix];
     };
   mmax=5000;
   if(max<4000) mmax=4000;
   if(max<3000) mmax=3000;
   if(max<2000) mmax=2000;
   if(max<1000) mmax=1000;
   if(max<800) mmax=800;
   if(max<600) mmax=600;
   if(max<500) mmax=500;
   if(max<400) mmax=400;
   if(max<200) mmax=200;
   if(max<100) mmax=100;
   if(max<50) mmax=50;
   idx = 1600/nn;
   linx = idx*nn;
   ixbas = 100+(2200-linx)/2;
   dy = 2400.0/(double)mmax;
   iybas = 250;
   mova(ixbas,iybas);
   drwr(linx,0);
   mova(ixbas,iybas);
   iylst = 0;
   for(i=n1;i<=n2;i++)
    { if(i<0) ifix=i+2560;
      if(i>=0) ifix=i%2560;
      ii = cdata[m][ifix];
      y = (double)ii;
      y = y*dy;
      iy = (int)y;
      idy = iy-iylst;
      drwr(0,idy);
      drwr(idx,0);
      iylst=iy;
    }
      drwr(0,-iylst);
/* draw the fit */
   for(i=n1;i<n2;i++)
     { ii=i-n1;
       y = yfit[ii]*dy;
       iy = (int)y;
       ix = ixbas + idx*(ii) + idx/2;
       if(i==n1) mova(ix,iy);
       if(i!=n1) drwa(ix,iy);
        fprintf(fp,"i=%d ii=%d ix=%d  iy=%d  yfit=%f  cdata=%d\n",
	   i,ii,ix,iy,yfit[ii],cdata[0][i]);
     }      

/*  label horizontal axis */
    idel=2;
    if(nn>100) idel=25;
    if(nn>200) idel=50;
    for(i=0;i<nn+2;i=i+idel)
     { ix=ixbas+idx*i;
       mova(ix,iybas);
       drwr(0,-30);
       k=i/2;
       if(k*2 == i)
         { sprintf(str,"%3d",i);
           kx = ix-45;
           if(i<100) kx = ix-55;
           if(i<10) kx=ix-75;
           symb(kx,iybas-110,0.0,str);
         }
     }
/*  label vertical axis  */
    ny=mmax/100;
    if(ny>10) ny=10;
    if(mmax == 1000) ny=5;
    if(mmax == 800) ny=4;
    if(mmax == 600) ny=3;
    if(mmax == 200) ny=4;
    if(mmax == 100) ny=4;
    if(mmax == 50) ny=5;
    y=(double)mmax*dy;
    iy = (int)y;
    mova(ixbas,iybas);
    drwr(0,iy);
    for(i=0;i<=ny;i++)
     { ky = i*mmax/ny;
       y = (double)ky * dy;
       iy = (int)y + iybas;
       mova(ixbas,iy);
       drwr(-20,0);
       sprintf(str,"%4d",ky);
       kx = ixbas-150;
       symb(kx,iy-20,0.0,str);
     }
    /*  print label */
    symb(200,3000,0.0,string);
    plotmx();
 }
fpsw(int i)
/* read front panel w=switches on PIO (programable IO) vme module */
  { int l;
    unsigned long swadr=0x570000,*adr,kk;
    adr = (unsigned long *)(vmebase + swadr);
    kk = *adr;
    l = (kk>>i) & 1;
    return(l);
  }

wtstreg(int i)
/* write to test register on PIO (programable IO) vme module */
  { unsigned long swadr=0x570000,*adr;
    adr = (unsigned long *)(vmebase + swadr + 0x14);
    *adr = (unsigned long)i;
  }

    double hstfit(i,l,x)
    int i,l;
    double x;
    {double y;
     y=0.0;
     return(y); 
    }  
 double chisqr()
   { int i;
     double chisq1,sdy,dy;
extern double functn();  
        for(i=0;i<npnts;i++) 
	  { yfit[i] = functn(xk[i]);
	    if(fpsw(1)==1) 
	      { printf("i=%d  xk=%f  yk=%f  yfit=%f\n",
	             i,xk[i],yk[i],yfit[i]);
	      }
	  }     
           chisq1=0.0;
	   for(i=0;i<npnts;i++) 
	     { dy = yk[i]-yfit[i];
	       sdy = sigmay[i]; 
	       chisq1 = chisq1 + (dy*dy)/(sdy*sdy);
	       if(fpsw(1)==1) printf("i=%d  yk[i]=%f  yfit=%f  dy=%f  sdy=%f chisq1=%f\n",
	         i,yk[i],yfit[i],dy,sdy,chisq1);
	     }
	  /* printf(" chisqr=%f  p=%f  %f  %f\n",chisq1,p[0],p[1],p[2]); */
		if(i==fpsw(3)==1) exit(0); 
	  return(chisq1);
   }
  double functn(double xx)
    { int ix;
      double yy,dx,dy,delx,dely,ximai,yimai,xkx;
      double xbin[100] = {-72.0,-70.0,-68.0,-66.0,-64.0,-62.0,-60.0,   
                                      -58.0,-56.0,-54.0,-52.0,-50.0,   
                                      -48.0,-46.0,-44.0,-42.0,-40.0,   
                                      -38.0,-36.0,-34.0,-32.0,-30.0,   
                                      -28.0,-26.0,-24.0,-22.0,-20.0,   
                                      -18.0,-16.0,-14.0,-12.0,-10.0,
				       -8.0, -6.0, -4.0, -2.0,  0.0,
				        2.0,  4.0,  6.0,  8.0, 10.0,
				       12.0, 14.0, 16.0, 18.0, 20.0,
				       22.0, 24.0, 26.0, 28.0, 20.0,
				       32.0, 34.0, 36.0, 38.0, 30.0,
				       42.0, 44.0, 46.0, 48.0, 40.0,
				       52.0, 54.0, 56.0, 58.0, 50.0,
				       62.0, 64.0, 66.0, 68.0, 60.0,
				       72.0, 74.0, 76.0, 78.0, 70.0,
				       82.0, 84.0, 86.0, 88.0, 80.0,
				       92.0, 94.0, 96.0, 98.0, 90.0,
				      102.0,104.0,106.0,108.0,100.0,
				      112.0,114.0,116.0,118.0,110.0,
				      122.0,124.0,126.0};
				       
				                                   
      double ybin[100] = {0.006344, -0.002177, -0.013247, -0.010013, -0.004665,
                        -0.008894, -0.005908, -0.003732, -0.008458, -0.016046,
			-0.027925, -0.036072, -0.050128, -0.067417, -0.077741,
			-0.095342, -0.106972, -0.118975, -0.126625, -0.124572,
			-0.116052, -0.098887, -0.068972, -0.023074,  0.028422,
			 0.085577,  0.164500,  0.252565,  0.330804,  0.414640,
                         0.518254,  0.604826,  0.682754,  0.753529,  0.833261,
                         0.889483,  0.939424,  0.968655,  0.996206,  1.000000,
                         0.993967,  0.982648,  0.950743,  0.915044,  0.870079,
                         0.816655,  0.758754,  0.698799,  0.619752,  0.558368,
                         0.497730,  0.434728,  0.370732,  0.320045,  0.265688,
                         0.206605,  0.167299,  0.132720,  0.105106,  0.073512,
                         0.054046,  0.029231,  0.018285,  0.009640,  0.004291,
                        -0.003110, -0.004043, -0.004416, -0.007712, -0.006406,
		        -0.007277, -0.010884, -0.005100, -0.003794, -0.002363,
			-0.009702, -0.004354, -0.001617, -0.008458, -0.004602,
			-0.008894, -0.010262, -0.012439, -0.012252, -0.012376,
			-0.014740, -0.014926, -0.014615, -0.015237, -0.009889,
		        -0.012128, -0.007152, -0.012563, -0.008769, -0.006779,
			-0.008832, -0.004043, -0.006095, -0.006157, -0.005908};
	ximai = p[0]*xx + p[1];
	if(ximai<-72.0) 
	    { yimai = (ybin[0] + ybin[1] + ybin[2] + ybin[3] + ybin[4])/5.0;
	      yy = p[2]*yimai + p[3];
	if(fpsw(2)==1) fprintf(fp," xx=%f  yy=%f  ximai=%f  yimai=%f  %f  %f\n",
	      xx,yy,ximai,yimai,p[2]*yimai,p[3]); 
	      return(yy);
	    }
	if(ximai>126.0) 
	    { yimai = (ybin[118] + ybin[120] + ybin[122] + ybin[124] + ybin[126])/5.0;
	      yy = p[2]*yimai + p[3];
	if(fpsw(2)==1) fprintf(fp," xx=%f  yy=%f  ximai=%f  yimai=%f  %f  %f\n",
	     xx,yy,ximai,yimai,p[2]*yimai,p[3]); 
	      return(yy);
	    }
        ix = (int)(ximai/2.0) +37;
	dx = fmod(ximai,2.0);
	delx = 2.0;
	dely = ybin[ix+1] - ybin[ix];
	dy = dx*dely/delx;
	yimai = ybin[ix]+dy;
	yy = p[2]*yimai + p[3];
	if(fpsw(2)==1) fprintf(fp," xx=%f  yy=%f  ximai=%f  yimai=%f  %f  %f\n",
	     xx,yy,ximai,yimai,p[2]*yimai,p[3]); 
	return(yy);
   }	
