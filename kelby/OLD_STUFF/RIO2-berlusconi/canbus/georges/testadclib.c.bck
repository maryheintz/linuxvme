#include <stdio.h>
#include <conio.h>
#include "adclib2000.h"

extern long Base;

void main(void)
{
	long status;
	char version[8];
	int i,j,k;

	unsigned short timer;
	char npmt;
	unsigned short maxscans;
	char zone, sector, card;
	unsigned short delay;
	unsigned short dat;
	unsigned short result;
	unsigned short conv[48];

	char fbt;
	char fb[0x4000];
	unsigned int adr;

	// Base adress for prototype is 0
	Base = 0; 

	// init canbus
	status = init(Base, "CAN0");

	// Init ISP

	status = adc_init(GO_ISP, version);
	for (i=0;i<7;i++) printf("%c", version[i]);
	printf(" - VERSION %d\n", version[7]);
		
	// Read back Flash B code

	printf("Reading Flash B\n");
	status = 0;
	i=0;
	do
	{
		if (status == 0) 
		{
			status = adc_readmem(i+0x4000, &fbt);
			fb[i] = fbt;
			printf("ADR: %#4x \r", i+0x4000);
			i++;
		}
			
	} while( (i<0x4000) && (status == 0));
	printf("\n");
	if (status != 0) printf ("There was an error at address 0x%x with status %d\n", i+0x4000, status);


	// Erase the Flash B

	status = adc_erase();

	printf("Erase status %d\n", status);	
	printf("Erasing Flash B...\n");
		// Data Polling
		i=0;
		do
		{
			if (status == 0)
			{
				status = adc_readmem(0x4000, &fbt);
				i++;
			} 
		} while((i<1000) && (status == 0) && ((((int)fbt)&0xFF) != 0xFF));
	if (i<1000) printf("Flash B erased with i=%d\n", i);
	else        printf("Erase timeout!\n");

	// Blanck Check Flash B

	printf ("Blank Checking...\n");
	status = adc_blankcheck(&adr);	

	if (status == 0) printf("Blankcheck success!\n");
	else		     printf("Blanckcheck error at adress 0x%x with status %d\n", adr, status);

	// Reprogram Flash B

	printf("Programming Flash B\n");
	status = 0;
	i=0;
	do
	{
		if (status == 0) 
		{
			status = adc_writemem(i+0x4000, fb[i]);
			printf("ADR: %#4x \r", i+0x4000);
			i++;
		}
			
	} while( (i<0x4000) && (status == 0));
	printf("\n");
	if (status != 0) printf ("There was an error at address 0x%x with status %d\n", i+0x4000, status);

	// verify Flash B

	printf("Verifying Flash B\n");
	status = 0;
	i=0;
	do
	{
		if (status == 0) 
		{
			status = adc_readmem(i+0x4000, &fbt);
			printf("ADR: %#4x \r", i+0x4000);
			i++;
		}
			
	} while( (i<0x4000) && (status == 0) && (fbt == fb[i-1]) );
	printf("\n");
	if ((status != 0) || (fbt != fb[i-1])) printf ("ERROR at 0x%x: D1=%x D2=%x STATUS=%d\n", i+0x4000, fb[i], fbt, status);

	// Init FB

	status = adc_init(GO_FB, version);
	for (i=0;i<7;i++) printf("%c", version[i]);
	printf(" - VERSION %d\n", version[7]);

	// Test timer control

	status = adc_rate(0xBEE4);
	status = adc_get_rate(&timer);
	printf("Timer set to 0x%x\n", timer);

	// Test npmt control

	status = adc_npmt(46);
	status = adc_get_npmt(&npmt);
	printf("NPMT set to %d\n", npmt);

	// test maxscans control

	status = adc_maxscans(10);
	status = adc_get_maxscans(&maxscans);
	printf("MAXSCANS set to %d\n", maxscans);

	// Test one pmtlist position

	status = adc_pmtlist(1, 3, 5, 7);
	status = adc_get_pmtlist(1, &zone, &sector, &card);
	printf("PMTLIST POS 1 set to ZONE %d SECTOR %d CARD %d\n", zone, sector, card);

	// Test DACSET - cannot readback, just print out the status

	status = adc_dacset( 10 );
	printf("DACSET status returned %d\n", status);

	// Test DELAY control

	status = adc_delay(5);
	status = adc_get_delay(&delay);
	printf("DELAY set to %d\n", delay);

	// Test the 3in1 set function - cannot read back, just printout the status

	status = adc_3in1set(0xAAAA);
	printf("3in1SET status returned %d\n", status);

	// Test the 3in1 get function - print out the result and the status

	status = adc_3in1get(&dat);
	printf("3in1GET returned 0x%x with status %d\n", dat, status);

	// Test a convertion

	status = adc_convert(1, 3, 5, &result);
	printf("CONVERT result %d with status %d\n", result, status);

	// Test the trigger function

	status = adc_trigger(46, conv);
	for (i=0;i<48;i+=4) 
	{
		for(j=0;j<4;j++) printf("%d ", conv[i+j]);
		printf("\n");
	}

	////////////////
	// Test autoscan
	////////////////

	// starts triggers
	status = adc_start();

	// recovers data
	for (i=0;i<13;i++)
	{
		status = adc_auto(46, conv);
		printf("i %d status %x\n", i , status);
		if (status == 0) for (j=0;j<48;j+=4) 
		{
			for(k=0;k<4;k++) printf("%d ", conv[j+k]);
			printf("\n");
		}
		else printf ("TIMEOUT: status = %x\n", status);
	}

	// stop triggers
	status = adc_stop();

}