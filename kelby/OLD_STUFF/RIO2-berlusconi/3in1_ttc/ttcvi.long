#include <stdio.h>
#include <math.h>
#include <types.h>
#include <time.h>
#include <sys/types.h>
#include <ces/vmelib.h>
time_t usec;
static struct  pdparam_master param = {
    1,   /* VME Iack (must be 1 for all normal pages) */
    0,   /* VME Read Prefetch Option                  */
    0,   /* VME Write Posting Option                  */
    1,   /* VME Swap Option                           */
    0,   /* page number return                        */
    0,   /* reserved                                  */
    0,   /* reserved                                  */
    0
  };

union CSR1 {
  unsigned short full;
  struct {
    unsigned short l1_trig_sel  : 3; /* (r/w) L1a<0-3>, VME if 4, random if 5 */
    unsigned short orb_sig_sel  : 1; /* (r/w) external orbit if 0             */
    unsigned short l1_fifofull  : 1; /* (r) L1A FIFO full if 1                */
    unsigned short l1_fifoempty : 1; /* (r) L1A FIFO empty if 1               */
    unsigned short l1_fiforst   : 1; /* (w) L1A FIFO reset if set to 1        */
    unsigned short vme_trpend   : 1; /* (r) VME transfer pending if 1         */
    unsigned short bcdelay      : 4; /* (r) read BC delay switch value        */
    unsigned short rantrigrt    : 3; /* (r/w) random trigger rate setting     */
    unsigned short unused       : 1; /* Highest bit is here     */
  } bits;
};

struct CSR2 {
  unsigned short rst_bgo : 4; /* (w) Reset B-Go FIFO <3..0> if set to 1       */
  unsigned short rtx_bgo : 4; /* (r/w) Retransmit B-Go FIFO if 0 when empty   */
  unsigned char status;       /* (r) FIFO 3 full/empty..FIFO 0 full/empty     */
};


/* structure of "B-Go" channel controls   */

struct B_Go {
  unsigned short mode;
  unsigned short inhibit_delay;
  unsigned short inhibit_duration;
  unsigned short sw_go;
};
  
/* TTCvi address space    */

struct TTCviBlock {
  unsigned short csr1;             /* $80 */
  unsigned short csr2;             /* $82 */
  unsigned short sw_rst;           /* $84 */
  unsigned short sw_L1A;           /* $86 */
  unsigned long evt_count;          
  unsigned long unused;
  struct B_Go b_go[4];
  unsigned long bgo_param[4];  
  unsigned long long_cycle;     
  unsigned short short_cycle;
};

struct TTCviBlock *ttcadr;

/* ----------------------------------------------------------- */
ttcvi_map()
 { unsigned long length = 400;
   unsigned long adrmodifier = 0x39;
   unsigned long offset = 0;
   unsigned long size = 0;
   ttcadr = (struct TTCviBlock *)(find_controller(0xb00080, length, adrmodifier,
				 offset, size, &param) );
   if(ttcadr == (struct TTCviBlock *)(-1)) 
    { printf("Unable to map VME address\n"); }
   ttcadr->sw_rst = 0;
   SendLongCommand(0,0,0x3,0xa3);
   ttcadr->csr1 = 0x4048;
   ttcadr->csr2 = 0xf000;  
   /*  printf(" csr1=%x  csr2=%x\n",ttcadr->csr1,ttcadr->csr2);  */
 }

/* ----------------------------------------------------------- */
GetTriggerSelect()
 { return ttcadr->csr1 & 0x7; }

/* ----------------------------------------------------------- */
Read_csr1() 
 { return ttcadr->csr1; }

/* ----------------------------------------------------------- */
Read_csr2()
 { return ttcadr->csr2; }

/* ----------------------------------------------------------- */
SetTriggerSelect(unsigned int tsel)
 { ttcadr->csr1 = (ttcadr->csr1 & 0xfff8) | (tsel & 0x7);
   /* printf("csr1=%x\n",ttcadr->csr1);  */
 }

/* ----------------------------------------------------------- */
SendL1A()
 { unsigned short saved = GetTriggerSelect();
   SetTriggerSelect(4); /* VME L1A  */
   ttcadr->sw_L1A = 0;
   SetTriggerSelect(saved); /* Switch back  */
 }

/* ----------------------------------------------------------- */
GetRandTrigRate()
 { return (ttcadr->csr1 >> 12) & 0x7; }

/* ----------------------------------------------------------- */
SetRandTrigRate(unsigned short rate)
 { ttcadr->csr1 = (ttcadr->csr1 & 0x8fff) | ((rate & 0x7) << 12); }

/* ----------------------------------------------------------- */
GetInhibitDelay(int channel)
 { return ttcadr->b_go[channel].inhibit_delay; }

/* ----------------------------------------------------------- */
SetInhibitDelay(int channel, unsigned short delay)
 { ttcadr->b_go[channel].inhibit_delay = delay & 0xfff; }

/* ----------------------------------------------------------- */
GetInhibitDuration(int channel)
 { return ttcadr->b_go[channel].inhibit_duration; }

/* ----------------------------------------------------------- */
SetInhibitDuration(int channel, unsigned short duration)
 {  ttcadr->b_go[channel].inhibit_duration = duration & 0xff; }

/* ----------------------------------------------------------- */
BroadcastShortCommand(unsigned int command)
 { ttcadr->short_cycle = (unsigned short)command; }

/* ----------------------------------------------------------- */
SendLongCommand(int address,int external,int subadr,int data)
 { unsigned long lwd;
   lwd = 0x80000000 | (address<<17) | (external<<16) | (subadr<<8) | data;
   usleep(1);
   ttcadr->long_cycle = lwd;
 }

/* ----------------------------------------------------------- */
GetBMode(int channel)
 { return ttcadr->b_go[channel].mode; }

/* ----------------------------------------------------------- */
SetBMode(int channel, unsigned char mode)
 { ttcadr->b_go[channel].mode = mode & 0xf; }

/* ----------------------------------------------------------- */
SetRetransmit(int channel, int retransmit)
 { ttcadr->csr2 = (ttcadr->csr2 & ~(1u << 8 + channel))
    | (!retransmit << 8 + channel);
 }

/* ----------------------------------------------------------- */
ResetFIFO(int channel)
 { ttcadr->csr2 = (ttcadr->csr2) | (1u << 12 + channel); }

/* ----------------------------------------------------------- */
BPutShort(int channel, int command) 
  { unsigned long kl;
    kl = 0x80000000 | (command<<23); 
    ttcadr->bgo_param[channel] = kl;  
  }

/* ----------------------------------------------------------- */
BPutLong(int channel, int address, int external, int subadr, int data) 
 { unsigned long lwd;
   lwd = 0x80000000 | (address<<17) | (external<<16) | (subadr<<8) | data;
   usleep(1);
   ttcadr->bgo_param[channel] = lwd;
 }

/* ----------------------------------------------------------- */
BGoSignal(int channel)
 { ttcadr->b_go[channel].sw_go = 0; }

/* ----------------------------------------------------------- */
/* GetClockDelay()
 { return 2 * (~(ttcadr->csr1 >> 8) & 0xf); }  */
