
#include <stdio.h>
#include <math.h>
#include <time.h>
#include <ces/vmelib.h>

#include <sys/types.h>
#include <unistd.h>
#include <mem.h>


#include "atdaq_types.h"
#include "s5933lib.h"
#include "SLINK.h"
#include "ttcvi.h"
int fdata[49][32],ipk[49],pk[49];

int ttcadr,id;
int digadr[8] = {0x101f,0x1004,0x1006,0x1025,0x101c,0x1021,0x1020,0x1015};
int dm[8] = {1,0,0,0,0,0,0,1};
int ddac1[8]={175,175,175,175,175,175,175,175};
int ddac2[8] ={175,175,175,175,175,175,175,175};
time_t usec = 1;
int code;
static int nsamp = 7;
SLINK_parameters slink_para;
SLINK_device *dev;
typedef union {
	unsigned long ldata;
	struct {
		unsigned int topbit   :  1;   /* bit31 head flag */
		unsigned int parity   :  1;   /* bit30 parity bit */
		unsigned int data1    :  10;  /* bit(29:20) adc value1 */
		unsigned int data2    :  10;  /* bit(19:10) adc value2 */
		unsigned int data3    :  10;  /* bit(9:0) adc value3 */
		} bits;
	} slink_formatted_data;
typedef union {
	unsigned long ldata;
	struct {
		unsigned int board8_dmu2_bits : 2;
		unsigned int board8_dmu1_bits : 2;
		unsigned int board7_dmu2_bits : 2;
		unsigned int board7_dmu1_bits : 2;
		unsigned int board6_dmu2_bits : 2;
		unsigned int board6_dmu1_bits : 2;
		unsigned int board5_dmu2_bits : 2;
		unsigned int board5_dmu1_bits : 2;
		unsigned int board4_dmu2_bits : 2;
		unsigned int board4_dmu1_bits : 2;
		unsigned int board3_dmu2_bits : 2;
		unsigned int board3_dmu1_bits : 2;
		unsigned int board2_dmu2_bits : 2;
		unsigned int board2_dmu1_bits : 2;
		unsigned int board1_dmu2_bits : 2;
		unsigned int board1_dmu1_bits : 2;
		} bits;
	} slink_unformatted_data;

/* ttcvi parameter */
static char *ttcvi_address;
static int icap;
main(argc,argv,envs)
int argc;
char *argv[];
char *envs[];
  { int tim,i,l,k,kkk,pipe,drawer,dig,kk,tube,wait;
    int dac;
    double charge,dacval,capacitor;
    char xstring[80],ystring[80],string[80],err[80];
    double asum,axsum,axxsum,ped,dped,sig2,aval,yc;
    ttcadr=0x1234;
    ttcvi_map(ttcadr);
    if(sw(5) == 1)
       { printf("input ddac1 values\n");
         fscanf(stdin,"%d %d %d %d %d %d %d %d",
	    &ddac1[0],&ddac1[1],&ddac1[2],&ddac1[3],
	    &ddac1[4],&ddac1[5],&ddac1[6],&ddac1[7]);
         printf("input ddac2 values\n");
         fscanf(stdin,"%d %d %d %d %d %d %d %d", 
	    &ddac2[0],&ddac2[1],&ddac2[2],&ddac2[3],
	    &ddac2[4],&ddac2[5],&ddac2[6],&ddac2[7]);
	 printf("ddac1=%d %d %d %d %d %d %d %d\n",
	    ddac1[0],ddac1[1],ddac1[2],ddac1[3],
	    ddac1[4],ddac1[5],ddac1[6],ddac1[7]);
	 printf("ddac2=%d %d %d %d %d %d %d %d\n",
	    ddac2[0],ddac2[1],ddac2[2],ddac2[3],
	    ddac2[4],ddac2[5],ddac2[6],ddac2[7]);
       }
    kk = 0;
	slink_setup();
   /* for now set up the digitizer ttcrx chips using adrttc=0 */
     for(dig=0;dig<8;dig++) digitizer_setup(dig);  
     for(dig=0;dig<8;dig++) digitizer_setup(dig);  

loop:           
       for(dig=0;dig<8;dig++) set_sample(dig);
       clear_buffer();

       SendL1A();
       usleep(10000);
       slink_read();
          printf(" enter character for next event\n");
          fscanf(stdin,"%x",&wait);
          goto loop;
   }  /* end of main */
   

slink_setup()
        {
	SLINK_InitParameters(&slink_para);
	slink_para.position = 0;
	slink_para.start_word = 0x11111110;
	slink_para.stop_word = 0xfffffff0;
	if ((code = SSP_Open(&slink_para, &dev)) != SLINK_OK)
	{
	printf(" slink open error, error code = %d\n",code);
	SLINK_PrintErrorMessage(code);
	exit(0);
	}
	printf("slink opened\n");
	return; 
	}

clear_buffer()
	{
	unsigned long int word;
	int type_of_word;
	int data_count = 0;
	while ( (code = SSP_ReadOneWord(dev, &word, &type_of_word) !=
		SLINK_FIFO_EMPTY)) {
		data_count++;
		if ( data_count > 1000)  {
			return;
			}
		}	
	}
	  
slink_read()
        {
	unsigned long word;
	int parity,samples,error,sestr,destr,r_parity,v_parity,
	   mode,gain,bunch;
	   /*  parity - parity (odd)
	       samples - derandomizer length (number of samples)
	       error - parity error detected from memory in last readout
	       sestr - single error strobe recieved from the ttc
	       destr - double error strobe recieved from the ttc
	       r_parity - register parity (parity from the register in the chip)
	       v_parity - parity from the variables in the chip
	       mode - 0=normal  1=calibration 2=test 3=unused
	       gain - 1=high  0=low
	       bunch - bunch crossing number   */
	unsigned int type_of_word,byte1,byte2,byte3,byte4,n,k;
 
        slink_formatted_data sd;
	while (code = SSP_ReadOneWord(dev, &word, &type_of_word) == SLINK_OK)
	{if (type_of_word == SLINK_CONTROL_WORD) 
	 	{ printf("start control word %x\n",word); 
		  n=0;
                  k=0;
		}
	 if (type_of_word != SLINK_CONTROL_WORD) 
		if(n == 0)
		   { parity = (word>>30) & 1;
		     samples = (word>>26) & 0xf;
		     error = (word>>25) & 1;
		     sestr = (word>>24) & 1;
		     destr = (word>>23) & 1;
		     r_parity = (word>>22) & 1;
		     v_parity = (word>>18) & 0xf;
		     mode = (word>>15) & 3;
		     gain = (word>>12) & 0x7;
		     bunch = word & 0xfff;
		     printf("header word %x\n",word);
		     printf(" parity=%d  samples=%d  error=%d\n",
		        parity,samples,error);
		     printf(" SEstr=%d   r_parity=%d   v_parity=%d\n",
		              sestr,r_parity,v_parity);
		     printf(" mode=%d   gain=%d   bunch=%d\n",
		        mode,gain,bunch);
		     n++;
		    }
		else
		{if(word == 1) 
		  { k++;
		    printf("k=%d\n",k);
		  }
		 sd.ldata =  word;
		 byte4 = word & 0xff;
		 byte3 = (word>>8) & 0xff;
		 byte2 = (word>>16) & 0xff;
		 byte1 = (word>>24) & 0xff;
		 printf("n=%d word %x samples= %d %d %d %d\n",
		         n,word,byte1,byte2,byte3,byte4);
		 n++;
		}
        }		
	printf("no data\n");
	return;
       }
	 
digitizer_setup(int i)
      { int mode, adrttc, dac1, dac2;
        adrttc = digadr[i];
	mode = dm[i];
	dac1 = ddac1[i];
	dac2 = ddac2[i];
	
        SendLongCommand(adrttc,0,0x6,0);  /* reset ttcrx chips*/
	usleep(200);

        if(mode == 0) SendLongCommand(adrttc,0,0x3,0xb7); /* reset ttcrx chip */
	if(mode == 1) SendLongCommand(adrttc,0,0x3,0xa8); /* reset ttcrx chip */
	usleep(2);

        BroadcastShortCommand(0x40);     /* reset digitizer */
	usleep(2);

        if(mode == 0) SendLongCommand(adrttc,0,0x3,0xb7);  /* reset ttcrx chip */
	if(mode == 1) SendLongCommand(adrttc,0,0x3,0xa8);  /* reset ttcrx chip */
	usleep(2);

        SendLongCommand(adrttc,1,1,nsamp); /* number of samples */
	usleep(2);

	SendLongCommand(adrttc,1,2,21); /* set pipeline length=21 */
	usleep(2);
	
	SendLongCommand(adrttc,1,3,1);  /* test word part 1 LSB */	
	usleep(2);

	SendLongCommand(adrttc,1,4,0);  /* test word part 2 */	
	usleep(2);

	SendLongCommand(adrttc,1,5,0);  /* test word part 3 */	
	usleep(2);

	SendLongCommand(adrttc,1,6,0);  /* test word part 4 MSB */	
	usleep(2);

	SendLongCommand(adrttc,1,0x8,dac1);  /* set dac=160 */	
	usleep(2);
	
	SendLongCommand(adrttc,1,0x9,dac2);  /* set dac=160 */	
	usleep(2);
	
        SendLongCommand(adrttc,1,0xa,0); /* clock invert bits etc */
	usleep(2);

        SendLongCommand(adrttc,1,0xb,0xfc); /* high limit LSB */
	usleep(2);
	    
	SendLongCommand(adrttc,1,0xc,3); /* high limit MSB */
	usleep(2);

        SendLongCommand(adrttc,1,0xd,0);  /* low limit LSB */
	usleep(2);
	
	SendLongCommand(adrttc,1,0xe,0);  /* low limit MSB */
	usleep(2);
	
	SendLongCommand(adrttc,1,0xf,2);  /* set mode=2 TEST */	
	usleep(2);
	
      /*  BroadcastShortCommand(0x40);   */  /* reset digitizer */
	/* usleep(20); */
	}



set_sample(int i)
      { int mode, adrttc, dac1, dac2;
        adrttc = digadr[i];
	 
        BroadcastShortCommand(0x40);     /* reset digitizer */
        usleep(20); 
	
	SendLongCommand(adrttc,1,3,1);  /* test word part 1 LSB */	
	usleep(2);

	SendLongCommand(adrttc,1,4,0);  /* test word part 2 */	
	usleep(2);

	SendLongCommand(adrttc,1,5,0);  /* test word part 3 */	
	usleep(2);

	SendLongCommand(adrttc,1,6,0);  /* test word part 4 MSB */	
	usleep(2);
      }
