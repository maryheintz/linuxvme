/******************************************************************************
*
* vmetst.c
* 
******************************************************************************/

#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <curses.h>
#include <fcntl.h>
#include <errno.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <asm/page.h>
                                                                                
#include "vme_api.h"
                                                                                
extern int errno;
                                                                                
/*void enable_pci_image( void )*/
int main( void )
{
    int devHandle;
    int result;
    unsigned long i;
    UINT32 userMemAddrs;
    UINT8 swap;
    unsigned long wbuffer,rbuffer,*wadr,*radr;
    PCI_IMAGE_DATA idata;

    devHandle = vme_openDevice( "lsi0" );
    if ( devHandle < 0 )
    {   
        printf("Error - failed to open lsi0\n");    }
    else
    {
        idata.pciAddress = 0xd0000000;
        idata.vmeAddress = 0x0;     
        idata.size = 0x1000000;
        idata.dataWidth = VME_D32;  /* 32 bit data */
        idata.addrSpace = VME_A24;  /* 32 bit address */
        idata.postedWrites = 1;
        idata.type = LSI_DATA;      /* data AM code */
        idata.mode = LSI_USER;      /* non-privileged */
        idata.vmeCycle = 0; /* no BLT's on VME bus */
        idata.pciBusSpace = 0;  /* PCI bus memory space */
        idata.ioremap = 0;  /* use ioremap */

        result = vme_enablePciImage( devHandle, &idata );
        if ( result < 0 )
        {
            printf("Error - failed to enable PCI image 0 (%s)\n", 
                        strerror(errno));
        }
        else
        {   printf("PAGE_SIZE=%x\n",PAGE_SIZE);
            printf("PCI image 0 enabled, accessing  data...\n");
	    swap = 0xffffffff;
	    result = vme_setByteSwap(devHandle,swap);  
	    result = vme_mmap(devHandle,0,0x1000000,&userMemAddrs);
            printf("userMemAddrs=%x\n",userMemAddrs);
            wadr = (unsigned long *)(userMemAddrs+0x570014);
            radr = (unsigned long *)(userMemAddrs+0x570010);

            wbuffer=0x12345678;
	    *wadr = wbuffer;
	    rbuffer = *radr;
            printf(" rbuffer=%x\n",rbuffer);
            wbuffer=0x55555555;
	    *wadr = wbuffer;
	    rbuffer = *radr;
            printf(" rbuffer=%x\n",rbuffer);


            result = vme_disablePciImage( devHandle );
            if ( result < 0 )
            {
                printf("Error - failed to disable PCI image 0 (%s)\n", 
                        strerror(errno));
            }
        }
        vme_closeDevice( devHandle );
    }

    return( 0 );
}
